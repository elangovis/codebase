create or replace PACKAGE BODY "SCURVE_DIG_TMS_API_PKG" AS

PROCEDURE UPDATE_STG_API1 (P_PROJECT_ID VARCHAR2,
                           P_TMS_API1_STG_TBL T_TMS_API1_STG_TBL,
                           P_DONE_BY VARCHAR2,
                           O_ERROR_MESSAGE OUT VARCHAR2)
AS

V_CNT NUMBER(10);
V_CHCK_CNT NUMBER(10):=0;

BEGIN

  /*DELETE FROM STG_SCD_TMS_API2
    WHERE EPS_CONTRACT_ID IN
  (SELECT EPS_CONTRACT_ID FROM STG_SCD_TMS_API1 
    WHERE CONTRACT_ID=P_PROJECT_ID);   */

  DELETE FROM STG_SCD_TMS_API1 
    WHERE CONTRACT_ID=P_PROJECT_ID;
   
  FOR LF IN P_TMS_API1_STG_TBL.FIRST..P_TMS_API1_STG_TBL.LAST
  LOOP
  
    INSERT INTO STG_SCD_TMS_API1 VALUES
      (P_PROJECT_ID
      ,P_TMS_API1_STG_TBL(LF).API_TIMESTAMP         
      ,P_TMS_API1_STG_TBL(LF).EPS_CONTRACT_ID              
      ,P_TMS_API1_STG_TBL(LF).EPS                
      ,P_TMS_API1_STG_TBL(LF).VIEW_CONSIDERATION
      ,P_DONE_BY        
      ,SYSDATE);
   
  END LOOP;
  
  COMMIT;
  
  SELECT COUNT(1) into V_CNT FROM STG_SCD_TMS_API1 
    WHERE CONTRACT_ID=P_PROJECT_ID;  
    
  IF V_CNT>0 THEN 
	DELETE FROM SCD_TMS_API2
		WHERE EPS_CONTRACT_ID IN
			(SELECT EPS_CONTRACT_ID FROM SCD_TMS_API1 WHERE CONTRACT_ID=P_PROJECT_ID)
		AND EPS_CONTRACT_ID NOT IN
			(SELECT EPS_CONTRACT_ID FROM STG_SCD_TMS_API1 WHERE CONTRACT_ID=P_PROJECT_ID); 
	
	DELETE FROM SCD_TMS_API1
		WHERE EPS_CONTRACT_ID NOT IN
			(SELECT EPS_CONTRACT_ID FROM STG_SCD_TMS_API1 WHERE CONTRACT_ID=P_PROJECT_ID)
      AND CONTRACT_ID=P_PROJECT_ID; 
	
--: to Create duplicate rows in case of BOTH

FOR lf IN (SELECT * FROM STG_SCD_TMS_API1
			WHERE CONTRACT_ID=P_PROJECT_ID)
LOOP
  
  IF lf.VIEW_CONSIDERATION<>'BOTH' THEN
   V_CHCK_CNT:=0; 
   
	SELECT COUNT(1) INTO V_CHCK_CNT
	   FROM SCD_TMS_API1
		WHERE CONTRACT_ID=LF.CONTRACT_ID
		AND EPS_CONTRACT_ID=LF.EPS_CONTRACT_ID
		AND VIEW_CONSIDERATION=SUBSTR(UPPER(LF.VIEW_CONSIDERATION),1,1) ;
	
	IF V_CHCK_CNT=0 THEN 
	
		INSERT INTO SCD_TMS_API1(
			CONTRACT_ID        
			,API_TIMESTAMP     
			,EPS_CONTRACT_ID       
			,EPS               
			,VIEW_CONSIDERATION
			,IS_SELECTED
			,CREATED_BY        
			,CREATED_DATE      
			,UPDATED_BY
			,UPDATED_DATE
		) VALUES (
			lf.CONTRACT_ID        
			,lf.API_TIMESTAMP
			,lf.EPS_CONTRACT_ID
			,lf.EPS   
			,SUBSTR(UPPER(LF.VIEW_CONSIDERATION),1,1) 
			,'N'
			,lf.CREATED_BY        
			,lf.CREATED_DATE      
			,lf.CREATED_BY        
			,lf.CREATED_DATE);	
      
      COMMIT;-- newly added 
	ELSE 	
		UPDATE SCD_TMS_API1
			SET API_TIMESTAMP =LF.API_TIMESTAMP
			   ,EPS=LF.EPS
			   ,UPDATED_BY=P_DONE_BY
			   ,UPDATED_DATE=SYSDATE
		WHERE CONTRACT_ID=LF.CONTRACT_ID
		AND EPS_CONTRACT_ID=LF.EPS_CONTRACT_ID
		AND VIEW_CONSIDERATION=lf.VIEW_CONSIDERATION;		
	END IF;
	
  ELSE 
  
  	FOR lf1 in 1 .. 2 
  	LOOP	
	 
	 V_CHCK_CNT:=0; 
	 
	SELECT COUNT(1) INTO V_CHCK_CNT
		FROM SCD_TMS_API1
	WHERE CONTRACT_ID=LF.CONTRACT_ID
	 AND EPS_CONTRACT_ID=LF.EPS_CONTRACT_ID
	 AND VIEW_CONSIDERATION=(CASE WHEN lf1=1 THEN 'E' ELSE 'I' END);
	 
	 IF V_CHCK_CNT=0 THEN 
	 
		 INSERT INTO SCD_TMS_API1(
			 CONTRACT_ID        
			 ,API_TIMESTAMP     
			 ,EPS_CONTRACT_ID       
			 ,EPS               
			 ,VIEW_CONSIDERATION
			 ,IS_SELECTED
			 ,CREATED_BY        
			 ,CREATED_DATE      
			 ,UPDATED_BY
			 ,UPDATED_DATE
		 ) VALUES (
			 lf.CONTRACT_ID        
			 ,lf.API_TIMESTAMP
			 ,lf.EPS_CONTRACT_ID
			 ,(CASE WHEN lf1=1 AND lf.EPS NOT LIKE '%OTR%'
            THEN  REPLACE(REPLACE(lf.EPS,'CUSTOMERPLAN',''),'CUSTOMER_RT','')||'OTR' ELSE lf.EPS END) --lf.EPS :this change is done to show the BOTH in External OTR Category
			 ,(CASE WHEN lf1=1 THEN 'E' ELSE 'I' END) 
			 ,'N'
			 ,lf.CREATED_BY        
			 ,lf.CREATED_DATE      
			 ,lf.CREATED_BY        
			 ,lf.CREATED_DATE);	
	 ELSE 	
		 UPDATE SCD_TMS_API1
			 SET API_TIMESTAMP =LF.API_TIMESTAMP
			 ,EPS=(CASE WHEN lf1=1 AND lf.EPS NOT LIKE '%OTR%'
            THEN  REPLACE(REPLACE(lf.EPS,'CUSTOMERPLAN',''),'CUSTOMER_RT','')||'OTR' ELSE lf.EPS END) --lf.EPS :this change is done to show the BOTH in External OTR Category
			 ,UPDATED_BY=P_DONE_BY
			 ,UPDATED_DATE=SYSDATE
		 WHERE CONTRACT_ID=LF.CONTRACT_ID
		 AND EPS_CONTRACT_ID=LF.EPS_CONTRACT_ID
		 AND VIEW_CONSIDERATION=(CASE WHEN lf1=1 THEN 'E' ELSE 'I' END);		
	 END IF;	
		
  	END LOOP;  
  END IF;		
END LOOP;      
  END IF;
  
  COMMIT;
  
  O_ERROR_MESSAGE:='S';
  
EXCEPTION
WHEN OTHERS THEN  
  O_ERROR_MESSAGE:='F'||SQLERRM;
END UPDATE_STG_API1;


PROCEDURE UPDATE_STG_API2 (P_PROJECT_ID VARCHAR2,
                           P_INT_EXT_FLAG VARCHAR2,
                           P_TMS_API2_STG_TBL T_TMS_API2_STG_TBL,
                           P_DONE_BY VARCHAR2,
                           O_ERROR_MESSAGE OUT VARCHAR2)
AS

V_CNT NUMBER(10);
V_CHCK_CNT NUMBER(10):=0;
lf_indx  number:= 1;
lf_indx1  number:= 1;
v_prev_bl_flag VARCHAR2(1);
    
TYPE tg_prev_bl_rectype IS RECORD(
    CONTRACT_ID           SCD_TMS_API2.CONTRACT_ID %TYPE,
    EPS_CONTRACT_ID       SCD_TMS_API2.EPS_CONTRACT_ID%TYPE,
	  JOB_NUMBER			      SCD_TMS_API2.JOB_NUMBER%TYPE,
    BASELINE_ID           SCD_TMS_API2.BASELINE_ID%TYPE,
	  VIEW_CONSIDERATION	  SCD_TMS_API2.VIEW_CONSIDERATION%TYPE
);
	
TYPE tg_prev_bl_type IS TABLE OF tg_prev_bl_rectype INDEX BY PLS_INTEGER;
tg_prev_bl_tab tg_prev_bl_type;
tg_prev_job_tab tg_prev_bl_type;

BEGIN


	--The below for loop is written to retain the CURRENT_BASELINE_FLAG flag
    
  FOR lf_prev IN (SELECT TG.CONTRACT_ID,
						TG.EPS_CONTRACT_ID,
            TG.JOB_NUMBER,
						TG.BASELINE_ID,
						TG.VIEW_CONSIDERATION
					FROM STG_SCD_TMS_API2 STG,
						 SCD_TMS_API2 TG
					WHERE 1                                      =1
					AND TG.EPS_CONTRACT_ID                       =STG.EPS_CONTRACT_ID
					AND SUBSTR(UPPER(STG.VIEW_CONSIDERATION),1,1)=SUBSTR(UPPER(TG.VIEW_CONSIDERATION),1,1)
					AND STG.EPS_CONTRACT_ID                      =TG.EPS_CONTRACT_ID
					AND STG.JOB_NUMBER                           =TG.JOB_NUMBER
					AND nvl(STG.BASELINE_ID,'X')                 =NVL(TG.BASELINE_ID,'X')
					AND STG.CURRENT_BASELINE_FLAG               <>TG.CURRENT_BASELINE_FLAG
					AND TG.CURRENT_BASELINE_FLAG               ='Y'
					AND SUBSTR(UPPER(STG.VIEW_CONSIDERATION),1,1)=SUBSTR(UPPER(P_INT_EXT_FLAG),1,1)
					AND TG.CONTRACT_ID                           =P_PROJECT_ID) 
	LOOP
        tg_prev_bl_tab(lf_indx).CONTRACT_ID := lf_prev.CONTRACT_ID;
        tg_prev_bl_tab(lf_indx).EPS_CONTRACT_ID := lf_prev.EPS_CONTRACT_ID;
      	tg_prev_bl_tab(lf_indx).JOB_NUMBER := lf_prev.JOB_NUMBER;
        tg_prev_bl_tab(lf_indx).BASELINE_ID := lf_prev.BASELINE_ID;
        tg_prev_bl_tab(lf_indx).VIEW_CONSIDERATION := lf_prev.VIEW_CONSIDERATION;
        lf_indx := lf_indx + 1;
    END LOOP;
    
  --The below for loop is written to retain the IS_SELECTED flag
  
    FOR lf_job IN (SELECT	 DISTINCT CONTRACT_ID 		
                          ,EPS_CONTRACT_ID 	
                          ,JOB_NUMBER 		
                          ,VIEW_CONSIDERATION  
          FROM SCD_TMS_API2
					WHERE IS_SELECTED             ='Y'
					AND CONTRACT_ID             =P_PROJECT_ID
					AND VIEW_CONSIDERATION      =SUBSTR(UPPER(P_INT_EXT_FLAG),1,1)) 
	 LOOP
        tg_prev_job_tab(lf_indx1).CONTRACT_ID 		  := lf_job.CONTRACT_ID;
        tg_prev_job_tab(lf_indx1).EPS_CONTRACT_ID 	:= lf_job.EPS_CONTRACT_ID;
      	tg_prev_job_tab(lf_indx1).JOB_NUMBER 		    := lf_job.JOB_NUMBER;
        tg_prev_job_tab(lf_indx1).VIEW_CONSIDERATION := lf_job.VIEW_CONSIDERATION;
        lf_indx1 := lf_indx1 + 1;
		
    END LOOP;
    
    DELETE FROM STG_SCD_TMS_API2
    WHERE EPS_CONTRACT_ID IN
  (SELECT EPS_CONTRACT_ID FROM STG_SCD_TMS_API1 
    WHERE CONTRACT_ID=P_PROJECT_ID)
    AND SUBSTR(UPPER(VIEW_CONSIDERATION),1,1)=SUBSTR(UPPER(P_INT_EXT_FLAG),1,1); 
   
  FOR LF IN P_TMS_API2_STG_TBL.FIRST..P_TMS_API2_STG_TBL.LAST
  LOOP
  
    INSERT INTO STG_SCD_TMS_API2 VALUES
      (P_TMS_API2_STG_TBL(LF).API_TIMESTAMP         	   
      ,P_TMS_API2_STG_TBL(LF).EPS_CONTRACT_ID           	   
      ,P_TMS_API2_STG_TBL(LF).EPS                   	   
      ,P_TMS_API2_STG_TBL(LF).VIEW_CONSIDERATION    	   
      ,P_TMS_API2_STG_TBL(LF).JOB_NUMBER        	   
      ,P_TMS_API2_STG_TBL(LF).JOB_DESC      	   
      ,P_TMS_API2_STG_TBL(LF).BASELINE_ID       	   
      ,P_TMS_API2_STG_TBL(LF).BASELINE_DESC     	   
      ,P_TMS_API2_STG_TBL(LF).CURRENT_BASELINE_FLAG 
      ,P_TMS_API2_STG_TBL(LF).DATADATE 
      ,P_DONE_BY        
      ,SYSDATE);  
   
  END LOOP;
  
  COMMIT; 
  
SELECT COUNT(1) into V_CNT FROM STG_SCD_TMS_API2 
	WHERE EPS_CONTRACT_ID 
		IN (SELECT EPS_CONTRACT_ID FROM SCD_TMS_API1 
			WHERE CONTRACT_ID=P_PROJECT_ID 
			AND VIEW_CONSIDERATION=SUBSTR(UPPER(P_INT_EXT_FLAG),1,1));
    
  IF V_CNT>0 THEN 

DELETE FROM SCD_TMS_API2
WHERE (EPS_CONTRACT_ID,JOB_NUMBER,NVL(BASELINE_ID,'X')) IN
		(SELECT API1.EPS_CONTRACT_ID,JOB_NUMBER,NVL(BASELINE_ID,'X')
			FROM SCD_TMS_API1 API1,
				 SCD_TMS_API2 API2
			WHERE API1.CONTRACT_ID  =P_PROJECT_ID
			AND API1.EPS_CONTRACT_ID=API2.EPS_CONTRACT_ID
      AND API1.EPS_CONTRACT_ID IN ( select A.EPS_CONTRACT_ID FROM STG_SCD_TMS_API2 A)
			AND SUBSTR(UPPER(API2.VIEW_CONSIDERATION),1,1)=SUBSTR(UPPER(P_INT_EXT_FLAG),1,1)
      )
	AND (EPS_CONTRACT_ID,JOB_NUMBER,NVL(BASELINE_ID,'X')) NOT IN
		(SELECT API1.EPS_CONTRACT_ID,JOB_NUMBER,NVL(BASELINE_ID,'X')
			FROM SCD_TMS_API1 API1,
				 STG_SCD_TMS_API2 API2
			WHERE API1.CONTRACT_ID  =P_PROJECT_ID
			AND API1.EPS_CONTRACT_ID=API2.EPS_CONTRACT_ID
			AND SUBSTR(UPPER(API2.VIEW_CONSIDERATION),1,1)=SUBSTR(UPPER(P_INT_EXT_FLAG),1,1));
    
FOR lf IN (SELECT * FROM STG_SCD_TMS_API2
				WHERE EPS_CONTRACT_ID IN
				(SELECT EPS_CONTRACT_ID FROM SCD_TMS_API1 WHERE CONTRACT_ID=P_PROJECT_ID)
        AND SUBSTR(UPPER(VIEW_CONSIDERATION),1,1)=SUBSTR(UPPER(P_INT_EXT_FLAG),1,1))
LOOP

  IF lf.VIEW_CONSIDERATION<>'BOTH' THEN

   V_CHCK_CNT:=0; 
   
	SELECT COUNT(1) INTO V_CHCK_CNT  FROM SCD_TMS_API2
		WHERE EPS_CONTRACT_ID =lf.EPS_CONTRACT_ID
		AND NVL(BASELINE_ID,0)=NVL(lf.BASELINE_ID,0)
		AND JOB_NUMBER=lf.JOB_NUMBER
    AND SUBSTR(UPPER(VIEW_CONSIDERATION),1,1)=SUBSTR(UPPER(P_INT_EXT_FLAG),1,1);

	IF V_CHCK_CNT=0 THEN 
			
  	INSERT INTO SCD_TMS_API2(
		 API_TIMESTAMP        
		,CONTRACT_ID
		,EPS_CONTRACT_ID       
		,EPS                  
		,VIEW_CONSIDERATION   
		,JOB_NUMBER       
		,JOB_DESC     
		,BASELINE_ID      
		,BASELINE_DESC    
		,CURRENT_BASELINE_FLAG
		,DATADATE             
		,IS_SELECTED
		,CREATED_BY           
		,CREATED_DATE         
		,UPDATED_BY
		,UPDATED_DATE
  	) VALUES (
		 lf.API_TIMESTAMP        
		,P_PROJECT_ID
		,lf.EPS_CONTRACT_ID       
		,lf.EPS                  
		,SUBSTR(UPPER(LF.VIEW_CONSIDERATION),1,1)
		,lf.JOB_NUMBER       
		,lf.JOB_DESC     
		,lf.BASELINE_ID      
		,lf.BASELINE_DESC    
		,lf.CURRENT_BASELINE_FLAG
		,lf.DATADATE             
		,'N'
		,lf.CREATED_BY        
		,lf.CREATED_DATE      
		,lf.CREATED_BY        
		,lf.CREATED_DATE
  	);
  
   ELSE 

UPDATE SCD_TMS_API2 SET API_TIMESTAMP=lf.API_TIMESTAMP
					   ,EPS=lf.EPS                        
					   ,VIEW_CONSIDERATION =SUBSTR(UPPER(LF.VIEW_CONSIDERATION),1,1)              
					   ,JOB_DESC = lf.JOB_DESC                  
					   ,BASELINE_DESC = lf.BASELINE_DESC  
					   ,CURRENT_BASELINE_FLAG=lf.CURRENT_BASELINE_FLAG      
					   ,DATADATE=lf.DATADATE                   
					   ,UPDATED_BY=P_DONE_BY                 
					   ,UPDATED_DATE=SYSDATE 
		WHERE EPS_CONTRACT_ID =lf.EPS_CONTRACT_ID
		AND nvl(BASELINE_ID,'X')=nvl(lf.BASELINE_ID,'X')
		AND JOB_NUMBER=lf.JOB_NUMBER
        AND SUBSTR(UPPER(VIEW_CONSIDERATION),1,1)=SUBSTR(UPPER(P_INT_EXT_FLAG),1,1);
					   

      
   END IF;
   
  
  ELSE 
  
  	FOR lf1 in 1 .. 2 
  	LOOP

   V_CHCK_CNT:=0; 
   
	SELECT COUNT(1) INTO V_CHCK_CNT  FROM SCD_TMS_API2
		WHERE EPS_CONTRACT_ID =lf.EPS_CONTRACT_ID
		AND NVL(BASELINE_ID,0)=NVL(lf.BASELINE_ID,0)
		AND JOB_NUMBER=lf.JOB_NUMBER
        AND SUBSTR(UPPER(VIEW_CONSIDERATION),1,1)=SUBSTR(UPPER(P_INT_EXT_FLAG),1,1);

	IF V_CHCK_CNT=0 THEN 
	
  	INSERT INTO SCD_TMS_API2(
		 API_TIMESTAMP        
    ,CONTRACT_ID
		,EPS_CONTRACT_ID       
		,EPS                  
		,VIEW_CONSIDERATION   
		,JOB_NUMBER       
		,JOB_DESC     
		,BASELINE_ID      
		,BASELINE_DESC    
		,CURRENT_BASELINE_FLAG
		,DATADATE             
		,IS_SELECTED
		,CREATED_BY           
		,CREATED_DATE         
		,UPDATED_BY
		,UPDATED_DATE
  	) VALUES (
		 lf.API_TIMESTAMP        
		,P_PROJECT_ID
		,lf.EPS_CONTRACT_ID       
		,lf.EPS                  
		,(CASE WHEN lf1=1 THEN 'E' ELSE 'I' END)
		,lf.JOB_NUMBER       
		,lf.JOB_DESC     
		,lf.BASELINE_ID      
		,lf.BASELINE_DESC    
		,lf.CURRENT_BASELINE_FLAG
		,lf.DATADATE             
		,'N'
		,lf.CREATED_BY        
		,lf.CREATED_DATE      
		,lf.CREATED_BY        
		,lf.CREATED_DATE
  	);
   ELSE 

	UPDATE SCD_TMS_API2 SET API_TIMESTAMP=lf.API_TIMESTAMP
					   ,EPS=lf.EPS                                     
					   ,JOB_DESC = lf.JOB_DESC                  
					   ,BASELINE_DESC = lf.BASELINE_DESC  
					   ,CURRENT_BASELINE_FLAG=lf.CURRENT_BASELINE_FLAG      
					   ,DATADATE=lf.DATADATE                   
					   ,UPDATED_BY=P_DONE_BY                 
					   ,UPDATED_DATE=SYSDATE 
		WHERE EPS_CONTRACT_ID =lf.EPS_CONTRACT_ID
		AND nvl(BASELINE_ID,'X')=nvl(lf.BASELINE_ID,'X')
		AND JOB_NUMBER=lf.JOB_NUMBER
        AND SUBSTR(UPPER(VIEW_CONSIDERATION),1,1)=SUBSTR(UPPER(P_INT_EXT_FLAG),1,1);
		
END IF;
		
  	END LOOP;
	
  END IF;		
END LOOP;
      
  END IF;
  
  COMMIT;
  --The below for loop is written to retain the CURRENT_BASELINE_FLAG flag
  
 IF tg_prev_bl_tab.COUNT>0 THEN 
  
	FOR lf_bl_prev in tg_prev_bl_tab.FIRST .. tg_prev_bl_tab.LAST
	LOOP
	

		SELECT (CASE WHEN COUNT(1)=0 THEN 'N' ELSE 'Y' END)
				INTO v_prev_bl_flag
			FROM SCD_TMS_API2 TG
		WHERE TG.CONTRACT_ID =tg_prev_bl_tab(lf_bl_prev).CONTRACT_ID
		AND TG.EPS_CONTRACT_ID =tg_prev_bl_tab(lf_bl_prev).EPS_CONTRACT_ID
		AND TG.JOB_NUMBER =tg_prev_bl_tab(lf_bl_prev).JOB_NUMBER
		AND TG.VIEW_CONSIDERATION=tg_prev_bl_tab(lf_bl_prev).VIEW_CONSIDERATION		
		AND NVL(TG.BASELINE_ID,'X')=NVL(tg_prev_bl_tab(lf_bl_prev).BASELINE_ID,'X');
		
		IF v_prev_bl_flag='N' THEN 
			NULL;
		ELSE 

			UPDATE SCD_TMS_API2 SET CURRENT_BASELINE_FLAG=(CASE WHEN NVL(BASELINE_ID,'X') =NVL(tg_prev_bl_tab(lf_bl_prev).BASELINE_ID,'X') THEN 'Y' ELSE 'N' END)
						,UPDATED_BY=P_DONE_BY                 
						,UPDATED_DATE=SYSDATE 
			WHERE EPS_CONTRACT_ID =tg_prev_bl_tab(lf_bl_prev).EPS_CONTRACT_ID			
			AND JOB_NUMBER=tg_prev_bl_tab(lf_bl_prev).JOB_NUMBER
			AND CONTRACT_ID=tg_prev_bl_tab(lf_bl_prev).CONTRACT_ID
			AND SUBSTR(UPPER(VIEW_CONSIDERATION),1,1)=SUBSTR(UPPER(tg_prev_bl_tab(lf_bl_prev).VIEW_CONSIDERATION),1,1);		
		
		END IF;
		
	END LOOP;
  
 END IF;

  --The below for loop is written to retain the IS_SELECTED flag
 IF tg_prev_job_tab.COUNT>0 THEN
 
	FOR lf_prevs in tg_prev_job_tab.FIRST .. tg_prev_job_tab.LAST
	LOOP

			UPDATE SCD_TMS_API2 SET IS_SELECTED='Y'
						,UPDATED_BY=P_DONE_BY                 
						,UPDATED_DATE=SYSDATE 
			WHERE EPS_CONTRACT_ID =tg_prev_job_tab(lf_prevs).EPS_CONTRACT_ID			
			AND JOB_NUMBER=tg_prev_job_tab(lf_prevs).JOB_NUMBER
			AND CONTRACT_ID=tg_prev_job_tab(lf_prevs).CONTRACT_ID
			--AND CURRENT_BASELINE_FLAG='Y'
			AND VIEW_CONSIDERATION=tg_prev_job_tab(lf_prevs).VIEW_CONSIDERATION;	
		
	END LOOP;
  
 END IF;	
	COMMIT;
  O_ERROR_MESSAGE:='S';
  
EXCEPTION
WHEN OTHERS THEN  
  O_ERROR_MESSAGE:='F_'||SQLERRM;
END UPDATE_STG_API2;

PROCEDURE UPDATE_STG_API3 (P_REQUEST_LOG_ID NUMBER,
                           P_PROJECT_ID VARCHAR,
                           P_TMS_API3_STG_TBL T_TMS_API3_STG_TBL,
                           P_DONE_BY VARCHAR2,
                           O_ERROR_MESSAGE OUT VARCHAR2)
AS

V_INT NUMBER (10);
V_JOB_NUMBER VARCHAR2(300);
V_BASELINE_ID  VARCHAR2(300):=NULL;
V_INT_EXT_FLAG  VARCHAR2(30);
V_FILTER   VARCHAR2(30);

BEGIN

V_INT:=1;   

  FOR LF IN P_TMS_API3_STG_TBL.FIRST..P_TMS_API3_STG_TBL.LAST
  LOOP
  
  IF V_INT=1 THEN 
  
    V_INT:=2;
    
    V_JOB_NUMBER:=P_TMS_API3_STG_TBL(LF).JOB_NUMBER;
    V_BASELINE_ID:=P_TMS_API3_STG_TBL(LF).BASELINE_ID;
    V_FILTER:=P_TMS_API3_STG_TBL(LF).FILTER;
    V_INT_EXT_FLAG:=P_TMS_API3_STG_TBL(LF).INT_EXT_FLAG;
    
    DELETE FROM STG_SCD_TMS_API3 WHERE 
    JOB_NUMBER=V_JOB_NUMBER
    AND EPS_CONTRACT_ID=P_TMS_API3_STG_TBL(LF).EPS_CONTRACT_ID
    AND INT_EXT_FLAG=P_TMS_API3_STG_TBL(LF).INT_EXT_FLAG
    AND FILTER=P_TMS_API3_STG_TBL(LF).FILTER ;   

   COMMIT;
   
  END IF;  
   
    INSERT INTO STG_SCD_TMS_API3 VALUES
      ( P_PROJECT_ID
       ,P_TMS_API3_STG_TBL(LF).API3_TIMESTAMP
       ,P_TMS_API3_STG_TBL(LF).JOB_NUMBER
       ,P_TMS_API3_STG_TBL(LF).BASELINE_ID
       ,P_TMS_API3_STG_TBL(LF).EPS_CONTRACT_ID
       ,P_TMS_API3_STG_TBL(LF).DEPARTMENT_NAME
       ,P_TMS_API3_STG_TBL(LF).TRAIN
       ,P_TMS_API3_STG_TBL(LF).DATADATE
       ,P_TMS_API3_STG_TBL(LF).INT_EXT_FLAG
       ,P_TMS_API3_STG_TBL(LF).WEIGHT
       ,P_TMS_API3_STG_TBL(LF).FILTER
       ,P_TMS_API3_STG_TBL(LF).PROJECT_DT
       ,P_TMS_API3_STG_TBL(LF).ACTUAL
       ,P_TMS_API3_STG_TBL(LF).BASELINE
       ,P_TMS_API3_STG_TBL(LF).BL_LATE
       ,P_TMS_API3_STG_TBL(LF).FORECAST
       ,P_DONE_BY
       ,SYSDATE);

  END LOOP;

  -- To delete the unwanted jobnumber and baseline combination from the staging table ::17-Mar-2017
DELETE
		FROM STG_SCD_TMS_API3 API3
	WHERE (API3.JOB_NUMBER,NVL(API3.BASELINE_ID,'X')) NOT IN
	(SELECT API2.JOB_NUMBER,NVL(API2.BASELINE_ID,'X')
		FROM SCD_TMS_API2 API2
		WHERE 1                 =1
		AND API3.CONTRACT_ID    =API2.CONTRACT_ID
		AND API3.EPS_CONTRACT_ID=API2.EPS_CONTRACT_ID
		AND API3.INT_EXT_FLAG   =API2.VIEW_CONSIDERATION)
		AND API3.CONTRACT_ID=P_PROJECT_ID;
    
    COMMIT;
  
  -- call to stage to target proc
  FOR lf in 1 .. 2
  LOOP
  
	/*SELECT JOB_NUMBER,BASELINE_ID 
			INTO V_JOB_NUMBER,V_BASELINE_ID
		FROM SCD_TMS_API2 
	WHERE CONTRACT_ID=P_PROJECT_ID
		AND JOB_NUMBER=V_JOB_NUMBER
		AND IS_SELECTED='Y'
		AND CURRENT_BASELINE_FLAG='Y';*/ 

	IF lf =1 THEN 
	
		SCD_TMS_STG_TO_TG(P_REQUEST_LOG_ID,P_PROJECT_ID,V_JOB_NUMBER,'N',V_INT_EXT_FLAG,O_ERROR_MESSAGE);
    
	 -- INSERT_JOB_NUMBER_REC(P_REQUEST_LOG_ID,P_PROJECT_ID,V_JOB_NUMBER,'N',V_INT_EXT_FLAG,O_ERROR_MESSAGE);
    
		UPDATE SCD_TMS_UPDATE_CTRL 
				SET STATUS=(CASE WHEN V_FILTER='MIA_MI' THEN 'INPROGRESS' ELSE 'COMPLETE' END),
					LAST_UPDATED_BY=P_DONE_BY,
					LAST_UPDATED_DATE=SYSDATE
			WHERE REQUEST_LOG_ID=P_REQUEST_LOG_ID
			AND JOB_NUMBER=V_JOB_NUMBER
      AND INT_EXT_FLAG=V_INT_EXT_FLAG;
		
	ELSIF lf =2 then 
	
		SCD_TMS_STG_TO_TG(P_REQUEST_LOG_ID,P_PROJECT_ID,V_BASELINE_ID,'Y',V_INT_EXT_FLAG,O_ERROR_MESSAGE);
 	  
  --  INSERT_JOB_NUMBER_REC(P_REQUEST_LOG_ID,P_PROJECT_ID,V_BASELINE_ID,'Y',V_INT_EXT_FLAG,O_ERROR_MESSAGE);
	
		UPDATE SCD_TMS_UPDATE_CTRL 
				SET STATUS=(CASE WHEN V_FILTER='MIA_MI' THEN 'INPROGRESS' ELSE 'COMPLETE' END),
					LAST_UPDATED_BY=P_DONE_BY,
					LAST_UPDATED_DATE=SYSDATE
			WHERE REQUEST_LOG_ID=P_REQUEST_LOG_ID
			AND JOB_NUMBER=V_BASELINE_ID
      AND INT_EXT_FLAG=V_INT_EXT_FLAG;	
		
	END IF;		
	COMMIT;  
  END LOOP;
  
  O_ERROR_MESSAGE:='S';
  
EXCEPTION
WHEN OTHERS THEN
  O_ERROR_MESSAGE:='F'||SQLERRM;
  
  UPDATE SCD_TMS_UPDATE_CTRL 
		SET STATUS='ERROR',
		    LAST_UPDATED_BY=P_DONE_BY,
		    LAST_UPDATED_DATE=SYSDATE,
        REMARKS=O_ERROR_MESSAGE
	WHERE REQUEST_LOG_ID=P_REQUEST_LOG_ID
	AND JOB_NUMBER in (V_JOB_NUMBER,V_BASELINE_ID)
  AND INT_EXT_FLAG=V_INT_EXT_FLAG;
  
  COMMIT;
  
END UPDATE_STG_API3;

PROCEDURE SCD_TMS_STG_TO_TG(P_REQUEST_LOG_ID NUMBER,
							P_PROJECT_ID VARCHAR2,
							P_JOB_NUMBER VARCHAR2,
              P_BL_FLAG VARCHAR2,
              P_INT_EXT_FLAG VARCHAR2,
							O_ERROR_MESSAGE OUT VARCHAR2)
AS

V_LOOP_CNT NUMBER(10);
V_INT_EXT_FLAG VARCHAR2(10);
V_FILTER_FLAG VARCHAR2(10);
V_NEW_FILTER_FLAG VARCHAR2(10);
V_MAX_PRJ_DT DATE;
V_MIN_PRJ_DT DATE;
v_indx NUMBER := 1;
  
TYPE t_scd_tg_rectype IS RECORD (
	CONTRACT_ID       	TG_SCD_TMS_API3.CONTRACT_ID%TYPE,
	JOB_NUMBER        	TG_SCD_TMS_API3.JOB_NUMBER%TYPE,
	EPS_CONTRACT_ID   	TG_SCD_TMS_API3.EPS_CONTRACT_ID%TYPE,
	INT_EXT_FLAG	      TG_SCD_TMS_API3.VIEW_CONSIDERATION%TYPE,
	DATADATE          	TG_SCD_TMS_API3.DATADATE%TYPE,
	DEPARTMENT_NAME   	TG_SCD_TMS_API3.DEPARTMENT_NAME%TYPE,
	TRAIN             	TG_SCD_TMS_API3.TRAIN%TYPE,
	WEIGHT            	TG_SCD_TMS_API3.WEIGHT%TYPE,
	FILTER            	TG_SCD_TMS_API3.FILTER%TYPE,
	PROJECT_DT        	TG_SCD_TMS_API3.PROJECT_DT%TYPE,
	ACTUAL            	TG_SCD_TMS_API3.ACTUAL%TYPE,
	FORECAST          	TG_SCD_TMS_API3.FORECAST%TYPE,
	CUM_ACTUAL        	TG_SCD_TMS_API3.CUM_ACTUAL%TYPE,
	CUM_FORECAST      	TG_SCD_TMS_API3.CUM_FORECAST%TYPE,
	CREATED_DATE	  	TG_SCD_TMS_API3.CREATED_DATE%TYPE
);


TYPE t_scd_tg_type IS TABLE OF t_scd_tg_rectype INDEX BY PLS_INTEGER;
t_scd_tg_tbl t_scd_tg_type;

CURSOR LC_FILTER (P_JOB_NUMBER VARCHAR2,
				  P_INT_EXT_FLAG VARCHAR2,
				  P_FILTER VARCHAR2)
IS
SELECT DISTINCT LV3.CONTRACT_ID,
  (CASE WHEN P_BL_FLAG='N' THEN LV3.JOB_NUMBER ELSE LV3.BASELINE_ID END) JOB_NUMBER ,
  LV3.EPS_CONTRACT_ID ,
  LV3. INT_EXT_FLAG ,
  LV3.DEPARTMENT_NAME ,
  LV3.TRAIN,
  LV3.WEIGHT,
  LV3.FILTER
FROM STG_SCD_TMS_API3 LV3
WHERE (CASE WHEN P_BL_FLAG='N' THEN LV3.JOB_NUMBER ELSE LV3.BASELINE_ID END)=P_JOB_NUMBER
AND LV3.INT_EXT_FLAG           =P_INT_EXT_FLAG
AND LV3.FILTER                 =P_FILTER;


CURSOR LC_CUMULATIVE_VALUE(P_JOB_NUMBER VARCHAR2,
                           P_INT_EXT_FLAG VARCHAR2,
                           P_FILTER VARCHAR2,
                           P_DEPT_NM VARCHAR2,
                           P_TRAIN VARCHAR2,
                           P_MIN_DATE DATE,
                           P_MAX_DATE DATE) 
IS
WITH PRJ_DEFINATION AS (SELECT DISTINCT LV3.CONTRACT_ID
                                       ,(CASE WHEN P_BL_FLAG='N' THEN LV3.JOB_NUMBER ELSE LV3.BASELINE_ID END) JOB_NUMBER 
                                       ,LV3.EPS_CONTRACT_ID 
                                       ,LV3.INT_EXT_FLAG 
                                       ,LV3.DATADATE 
                                       ,LV3.DEPARTMENT_NAME 
                                       ,LV3.TRAIN 
                                       ,LV3.WEIGHT 
                                       ,LV3.FILTER 
						FROM STG_SCD_TMS_API3 LV3
						WHERE (CASE WHEN P_BL_FLAG='N' THEN LV3.JOB_NUMBER ELSE LV3.BASELINE_ID END)=P_JOB_NUMBER
						AND NVL(LV3.TRAIN ,'X')        =NVL(P_TRAIN,'X')
						AND LV3.INT_EXT_FLAG           =P_INT_EXT_FLAG
						AND LV3.FILTER                 =P_FILTER
						AND LV3.DEPARTMENT_NAME        =P_DEPT_NM),
    PRJ_VALUES AS (SELECT DISTINCT LV3.CONTRACT_ID
                                  ,(CASE WHEN P_BL_FLAG='N' THEN LV3.JOB_NUMBER ELSE LV3.BASELINE_ID END) JOB_NUMBER
                                  ,LV3.EPS_CONTRACT_ID 
                                  ,LV3.INT_EXT_FLAG 
                                  ,LV3.DATADATE 
                                  ,LV3.DEPARTMENT_NAME 
                                  ,LV3.TRAIN 
                                  ,LV3.WEIGHT
                                  ,LV3.FILTER
                                  ,LV3.PROJECT_DT 
                                  ,(CASE WHEN P_BL_FLAG='N' THEN LV3.ACTUAL ELSE LV3.BASELINE END)  ACTUAL
                                  ,(CASE WHEN P_BL_FLAG='N' THEN LV3.FORECAST ELSE LV3.BL_LATE END) FORECAST
						FROM STG_SCD_TMS_API3 LV3
						WHERE NVL(LV3.TRAIN,'X')                =NVL(P_TRAIN,'X')
						AND (CASE WHEN P_BL_FLAG='N' THEN LV3.JOB_NUMBER ELSE LV3.BASELINE_ID END)=P_JOB_NUMBER
						AND LV3.INT_EXT_FLAG           =P_INT_EXT_FLAG
						AND LV3.FILTER                 =P_FILTER
						AND LV3.DEPARTMENT_NAME        =P_DEPT_NM),
	 PRJ_DATES AS (SELECT PROJECT_DT 
						FROM SCD_TMS_DATES 
						WHERE PROJECT_DT BETWEEN P_MIN_DATE AND P_MAX_DATE)
SELECT DEF.CONTRACT_ID,
  DEF.JOB_NUMBER ,
  DEF.EPS_CONTRACT_ID ,
  DEF.INT_EXT_FLAG ,
  DEF.DATADATE ,
  DEF.DEPARTMENT_NAME ,
  DEF.TRAIN ,
  DEF.WEIGHT ,
  DEF.FILTER ,
  DT.PROJECT_DT ,
  VAL.ACTUAL ,
  VAL.FORECAST ,
  SUM(ACTUAL) OVER (ORDER BY DT.PROJECT_DT ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) CUM_ACTUAL,
  SUM(FORECAST) OVER (ORDER BY DT.PROJECT_DT ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) CUM_FORECAST
FROM PRJ_DEFINATION DEF,
	 PRJ_VALUES VAL ,
	 PRJ_DATES DT  
WHERE VAL.PROJECT_DT(+)=DT.PROJECT_DT;
						   
BEGIN


  SELECT INT_EXT_FLAG,FILTER_FLAG  
	   INTO V_INT_EXT_FLAG,V_FILTER_FLAG
	FROM SCD_TMS_UPDATE_CTRL 
	 WHERE REQUEST_LOG_ID=P_REQUEST_LOG_ID
	 AND CONTRACT_ID=P_PROJECT_ID
	 AND JOB_NUMBER=P_JOB_NUMBER
   AND INT_EXT_FLAG=P_INT_EXT_FLAG
	 --AND STATUS='COMPLETE'
	 --AND BL_FLAG='N'
   ;  
 
	IF V_FILTER_FLAG='MIA' THEN --if1
		V_LOOP_CNT:=2;
	ELSE 
		V_LOOP_CNT:=1;
	END IF ; --end if1
	
--	SELECT MAX(PROJECT_DT),MIN(PROJECT_DT) 
--		INTO V_MAX_PRJ_DT,V_MIN_PRJ_DT
--		FROM STG_SCD_TMS_API3  API3,
--    SCD_TMS_API2 AP2
--	WHERE API3.CONTRACT_ID=P_PROJECT_ID
--  AND API3.CONTRACT_ID=AP2.CONTRACT_ID
--  AND API3.EPS_CONTRACT_ID=AP2.EPS_CONTRACT_ID
--  AND AP2.IS_SELECTED='Y'
--	AND API3.INT_EXT_FLAG =V_INT_EXT_FLAG;
----  AND API3.FILTER=V_FILTER_FLAG;

	FOR LF IN 1 .. V_LOOP_CNT
	LOOP
  
  IF V_FILTER_FLAG ='MIA' AND LF=1 THEN 
  
    V_NEW_FILTER_FLAG:='MIA_MI';
	
  ELSIF V_FILTER_FLAG ='MIA' AND LF=2 THEN  
	
  	V_NEW_FILTER_FLAG:='MIA_A';
  ELSE 
  
    V_NEW_FILTER_FLAG:=V_FILTER_FLAG;
    
	END IF ; 
	
  SELECT MAX(PROJECT_DT),MIN(PROJECT_DT) 
		INTO V_MAX_PRJ_DT,V_MIN_PRJ_DT
		FROM STG_SCD_TMS_API3  API3,
    SCD_TMS_API2 AP2
	WHERE API3.CONTRACT_ID=P_PROJECT_ID
  AND API3.CONTRACT_ID=AP2.CONTRACT_ID
  AND API3.EPS_CONTRACT_ID=AP2.EPS_CONTRACT_ID
  AND AP2.IS_SELECTED='Y'
	AND API3.INT_EXT_FLAG =V_INT_EXT_FLAG
  AND API3.FILTER=V_NEW_FILTER_FLAG;
 
		FOR LF1 IN LC_FILTER(P_JOB_NUMBER,V_INT_EXT_FLAG,V_NEW_FILTER_FLAG)
		LOOP
    
			  FOR LF_CUM_VALUE IN LC_CUMULATIVE_VALUE(P_JOB_NUMBER 
													 ,LF1.INT_EXT_FLAG
													 ,LF1.FILTER
													 ,LF1.DEPARTMENT_NAME
													 ,LF1.TRAIN
													 ,V_MIN_PRJ_DT
													 ,V_MAX_PRJ_DT)
			  LOOP
			  
				t_scd_tg_tbl(v_indx).CONTRACT_ID:= lf_cum_value.CONTRACT_ID;
				t_scd_tg_tbl(v_indx).JOB_NUMBER:= lf_cum_value.JOB_NUMBER;
				t_scd_tg_tbl(v_indx).EPS_CONTRACT_ID:= lf_cum_value.EPS_CONTRACT_ID;
				t_scd_tg_tbl(v_indx).INT_EXT_FLAG:= lf_cum_value.INT_EXT_FLAG;
				t_scd_tg_tbl(v_indx).DATADATE:= lf_cum_value.DATADATE;
				t_scd_tg_tbl(v_indx).DEPARTMENT_NAME:= lf_cum_value.DEPARTMENT_NAME;
				t_scd_tg_tbl(v_indx).TRAIN:= lf_cum_value.TRAIN;
				t_scd_tg_tbl(v_indx).WEIGHT:= lf_cum_value.WEIGHT;
				t_scd_tg_tbl(v_indx).FILTER:= lf_cum_value.FILTER;
				t_scd_tg_tbl(v_indx).PROJECT_DT:= lf_cum_value.PROJECT_DT;
				t_scd_tg_tbl(v_indx).ACTUAL:= lf_cum_value.ACTUAL;
				t_scd_tg_tbl(v_indx).FORECAST:= lf_cum_value.FORECAST;
				t_scd_tg_tbl(v_indx).CUM_ACTUAL:= lf_cum_value.CUM_ACTUAL;
				t_scd_tg_tbl(v_indx).CUM_FORECAST:= lf_cum_value.CUM_FORECAST;
				t_scd_tg_tbl(v_indx).CREATED_DATE:= SYSDATE ;
				v_indx :=v_indx+1;
				
			  END LOOP; --end lf_cum_value
			  
		END LOOP; --end lf1 loop
		
	END LOOP; -- end lf loop

 DELETE FROM TG_SCD_TMS_API3
  WHERE CONTRACT_ID=P_PROJECT_ID
	 AND JOB_NUMBER=P_JOB_NUMBER
   AND VIEW_CONSIDERATION=V_INT_EXT_FLAG
   AND SUBSTR(FILTER,1,3)=V_FILTER_FLAG; 

DELETE
FROM TG_SCD_TMS_API3
WHERE CONTRACT_ID=P_PROJECT_ID 
AND JOB_NUMBER NOT IN
  ( SELECT JOB_NUMBER FROM SCD_TMS_API2 API2 WHERE API2.CONTRACT_ID=P_PROJECT_ID
  UNION ALL
  SELECT BASELINE_ID FROM SCD_TMS_API2 API2 WHERE API2.CONTRACT_ID=P_PROJECT_ID
  );


  COMMIT;

   
FORALL i IN t_scd_tg_tbl.first .. t_scd_tg_tbl.last
  INSERT INTO TG_SCD_TMS_API3 VALUES t_scd_tg_tbl(i);	

  COMMIT;

O_ERROR_MESSAGE:='S';
  
EXCEPTION
WHEN OTHERS THEN
  O_ERROR_MESSAGE:='F'||SQLERRM; 
END SCD_TMS_STG_TO_TG;

PROCEDURE GET_INT_EXT_CONFIG_DATA (P_PROJECT_ID VARCHAR2,
								   o_Get_INT_EPS_Nodes  OUT sys_refcursor,
								   o_Get_EXT_OTR_Nodes  OUT sys_refcursor,
								   o_Get_EXT_CRT_Nodes  OUT sys_refcursor,
								   o_Get_EXT_CPLN_Nodes  OUT sys_refcursor,
								   o_Get_INT_Config  OUT sys_refcursor,
								   o_Get_EXT_Config  OUT sys_refcursor,
                    o_Last_Refresh  OUT VARCHAR2,
								   O_ERROR_MESSAGE OUT VARCHAR2)
AS

V_CNT NUMBER(10);

BEGIN

--SELECT NEW_TIME(MAX(UPDATED_DATE),'EDT','GMT')
SELECT TO_CHAR(NEW_TIME(MAX(UPDATED_DATE),'EDT','GMT'),'DD-MON-YYYY HH24:MI:SS') 
  INTO O_LAST_REFRESH
FROM SCD_TMS_API1 
 WHERE CONTRACT_ID =P_PROJECT_ID;


OPEN o_Get_INT_EPS_Nodes FOR 
	SELECT EPS_CONTRACT_ID,
    IS_SELECTED
		FROM SCD_TMS_API1
	WHERE view_consideration='I'
		AND contract_id =P_project_id;


OPEN o_Get_EXT_OTR_Nodes FOR 
	SELECT EPS_CONTRACT_ID,
    IS_SELECTED
		FROM SCD_TMS_API1
	WHERE view_consideration='E'
		AND EPS LIKE '%OTR%'
		AND contract_id =P_project_id;

OPEN o_Get_EXT_CRT_Nodes FOR 
	SELECT EPS_CONTRACT_ID,
    IS_SELECTED
		FROM SCD_TMS_API1
	WHERE view_consideration='E'
		AND EPS LIKE '%CUSTOMER_RT%'
		AND contract_id =P_project_id;


OPEN o_Get_EXT_CPLN_Nodes FOR 
	SELECT EPS_CONTRACT_ID,
    IS_SELECTED
		FROM SCD_TMS_API1
	WHERE view_consideration='E'
		AND EPS LIKE '%CUSTOMERPLAN%'
		AND contract_id =P_project_id;
		
OPEN o_Get_INT_Config FOR
	SELECT WEIGHT_FLAG ,
			ACTUAL ,
			AT_COMPLETE_LATE ,
			AT_COMPLETE ,
			BL_EARLY ,
			BL_LATE ,
			FILTER_FLAG FILTER_DESC
      /*(SELECT DESCRIPTION
				FROM RT_LOOKUP_VALUES
			WHERE CODE  =FILTER_FLAG
			AND CATEGORY='SCURVE_TMS'
		) */
	FROM SCD_TMS_CONFIG
	WHERE CONTRACT_ID=P_PROJECT_ID
	and INT_EXT_FLAG='I';

OPEN o_Get_EXT_Config FOR
	SELECT WEIGHT_FLAG ,
			ACTUAL ,
			AT_COMPLETE_LATE ,
			AT_COMPLETE ,
			BL_EARLY ,
			BL_LATE ,
			FILTER_FLAG FILTER_DESC
      /*(SELECT DESCRIPTION
				FROM RT_LOOKUP_VALUES
			WHERE CODE  =FILTER_FLAG
			AND CATEGORY='SCURVE_TMS'
		) */
	FROM SCD_TMS_CONFIG
	WHERE CONTRACT_ID=P_PROJECT_ID
	and INT_EXT_FLAG='E';

  O_ERROR_MESSAGE:='S';
  
EXCEPTION
WHEN OTHERS THEN  
  O_ERROR_MESSAGE:='F'||SQLERRM;
  
END GET_INT_EXT_CONFIG_DATA;

PROCEDURE Get_Prj_BL_Data ( P_EPS_CONTRACT_ID VARCHAR2,
                            P_VIEW_CON VARCHAR2,
                            o_Get_Project_List  OUT sys_refcursor,
                            o_Last_Refresh  OUT VARCHAR2,
                            O_ERROR_MESSAGE OUT VARCHAR2)
AS
BEGIN

--SELECT NEW_TIME(MAX(UPDATED_DATE),'EDT','GMT') --? need to automate this
SELECT TO_CHAR(NEW_TIME(MAX(UPDATED_DATE),'EDT','GMT'),'DD-MON-YYYY HH24:MI:SS') 
  INTO O_LAST_REFRESH
FROM SCD_TMS_API2 
 WHERE EPS_CONTRACT_ID =P_EPS_CONTRACT_ID
 AND VIEW_CONSIDERATION =P_VIEW_CON;
 
 
OPEN o_Get_Project_List FOR
SELECT JOB_NUMBER,
  BASELINE_ID,
  CURRENT_BASELINE_FLAG,
  IS_SELECTED,
  BASELINE_DESC AS BASELINE_NAME
FROM SCD_TMS_API2
WHERE EPS_CONTRACT_ID   =P_EPS_CONTRACT_ID
AND VIEW_CONSIDERATION =P_VIEW_CON
ORDER BY JOB_NUMBER,
  CURRENT_BASELINE_FLAG DESC;
									
  O_ERROR_MESSAGE:='S';
  
EXCEPTION
WHEN OTHERS THEN  
  O_ERROR_MESSAGE:='F'||SQLERRM;
  
END Get_Prj_BL_Data;

PROCEDURE Update_Int_Ext_Config_Data (P_CONTRACT_ID VARCHAR2,
                                      P_INT_WEIGHT_FLAG VARCHAR2,
                                      P_EXT_WEIGHT_FLAG VARCHAR2,
                                      P_INT_ACTUAL VARCHAR2,
                                      P_INT_AT_COMPLETE_LATE VARCHAR2,
                                      P_INT_AT_COMPLETE VARCHAR2,
                                      P_INT_BL_EARLY VARCHAR2,
                                      P_INT_BL_LATE VARCHAR2,
                                      P_EXT_ACTUAL VARCHAR2,
                                      P_EXT_AT_COMPLETE_LATE VARCHAR2,
                                      P_EXT_AT_COMPLETE VARCHAR2,
                                      P_EXT_BL_EARLY VARCHAR2,
                                      P_EXT_BL_LATE VARCHAR2,
                                      P_INT_FILTER_FLAG VARCHAR2,
                                      P_EXT_FILTER_FLAG VARCHAR2,
                                      P_DONE_BY  VARCHAR2,
                                      O_ERROR_MESSAGE OUT VARCHAR2)
AS

V_COUNT NUMBER(10);

BEGIN

SELECT COUNT(1) INTO V_COUNT
 FROM SCD_TMS_CONFIG WHERE CONTRACT_ID=P_CONTRACT_ID;

 IF V_COUNT>0 THEN 
 
	UPDATE SCD_TMS_CONFIG
	SET WEIGHT_FLAG    =P_INT_WEIGHT_FLAG ,
		ACTUAL           = P_INT_ACTUAL ,
		AT_COMPLETE_LATE =P_INT_AT_COMPLETE_LATE ,
		AT_COMPLETE      = P_INT_AT_COMPLETE ,
		BL_EARLY         =P_INT_BL_EARLY ,
		BL_LATE          =P_INT_BL_LATE ,
		FILTER_FLAG      = P_INT_FILTER_FLAG ,
		UPDATED_BY       = P_DONE_BY ,
		UPDATED_DATE     =SYSDATE
	WHERE CONTRACT_ID  =P_CONTRACT_ID
	AND INT_EXT_FLAG='I';     
	
	
	UPDATE SCD_TMS_CONFIG
	SET WEIGHT_FLAG    =P_EXT_WEIGHT_FLAG ,
		ACTUAL           = P_EXT_ACTUAL ,
		AT_COMPLETE_LATE =P_EXT_AT_COMPLETE_LATE ,
		AT_COMPLETE      = P_EXT_AT_COMPLETE ,
		BL_EARLY         =P_EXT_BL_EARLY ,
		BL_LATE          =P_EXT_BL_LATE ,
		FILTER_FLAG      = P_EXT_FILTER_FLAG ,
		UPDATED_BY       = P_DONE_BY ,
		UPDATED_DATE     =SYSDATE
	WHERE CONTRACT_ID  =P_CONTRACT_ID
	AND INT_EXT_FLAG='E';  

 
 ELSE 
 
	INSERT INTO SCD_TMS_CONFIG VALUES(
		P_CONTRACT_ID ,
		'I' ,
		P_INT_WEIGHT_FLAG ,
		P_INT_ACTUAL ,
		P_INT_AT_COMPLETE_LATE ,
		P_INT_AT_COMPLETE ,
		P_INT_BL_EARLY ,
		P_INT_BL_LATE ,
		P_INT_FILTER_FLAG ,
		P_DONE_BY ,
		SYSDATE ,
		P_DONE_BY ,
		SYSDATE);
	
	INSERT INTO SCD_TMS_CONFIG VALUES(
		P_CONTRACT_ID ,
		'E' ,
		P_EXT_WEIGHT_FLAG ,
		P_EXT_ACTUAL ,
		P_EXT_AT_COMPLETE_LATE ,
		P_EXT_AT_COMPLETE ,
		P_EXT_BL_EARLY ,
		P_EXT_BL_LATE ,
		P_EXT_FILTER_FLAG ,
		P_DONE_BY ,
		SYSDATE ,
		P_DONE_BY ,
		SYSDATE
	);
 END IF;

COMMIT;
 
  O_ERROR_MESSAGE:='S';
  
EXCEPTION
WHEN OTHERS THEN  
  O_ERROR_MESSAGE:='F'||SQLERRM;
END Update_Int_Ext_Config_Data;

PROCEDURE UPDATE_IS_SELECTED_FLAG (P_EPS_CONTRACT_ID_INT VARCHAR2,
                                  P_EPS_CONTRACT_ID_EXT VARCHAR2,
                                  P_tms_scd_update_tbl t_tms_scd_update_tbl,  
                                  P_DONE_BY VARCHAR2,
                                  O_ERROR_MESSAGE OUT VARCHAR2)
AS

BEGIN


	UPDATE SCD_TMS_API1
	SET IS_SELECTED=(CASE WHEN EPS_CONTRACT_ID =P_EPS_CONTRACT_ID_EXT THEN 'Y' ELSE 'N' END ),
      UPDATED_BY=P_DONE_BY,
      UPDATED_DATE=SYSDATE
	WHERE CONTRACT_ID IN (select DISTINCT CONTRACT_ID from scd_tms_api1 where EPS_CONTRACT_ID =P_EPS_CONTRACT_ID_EXT)
  AND VIEW_CONSIDERATION='E';

	UPDATE SCD_TMS_API1
	SET IS_SELECTED=(CASE WHEN EPS_CONTRACT_ID =P_EPS_CONTRACT_ID_INT THEN 'Y' ELSE 'N' END ),
      UPDATED_BY=P_DONE_BY,
      UPDATED_DATE=SYSDATE
	WHERE CONTRACT_ID IN (select DISTINCT CONTRACT_ID from scd_tms_api1 where EPS_CONTRACT_ID =P_EPS_CONTRACT_ID_INT)
  AND VIEW_CONSIDERATION='I';

  UPDATE SCD_TMS_API2
	SET IS_SELECTED='N',
      UPDATED_BY=P_DONE_BY,
      UPDATED_DATE=SYSDATE
	WHERE CONTRACT_ID IN (select DISTINCT CONTRACT_ID from scd_tms_api1 
  where EPS_CONTRACT_ID  in (P_EPS_CONTRACT_ID_INT,P_EPS_CONTRACT_ID_EXT));  
     
  COMMIT;     

  FOR LF IN P_tms_scd_update_tbl.FIRST..P_tms_scd_update_tbl.LAST
  LOOP

    UPDATE SCD_TMS_API2
    SET CURRENT_BASELINE_FLAG =(CASE WHEN NVL(BASELINE_ID,0) =NVL(P_tms_scd_update_tbl(LF).BASELINE_ID,0) THEN 'Y' -- ? To handle null baseline
                              ELSE 'N'
                              END),
      IS_SELECTED=P_tms_scd_update_tbl(LF).IS_SELECTED,
      UPDATED_BY=P_DONE_BY,
      UPDATED_DATE=SYSDATE
    WHERE JOB_NUMBER   =P_tms_scd_update_tbl(LF).JOB_NUMBER
    AND EPS_CONTRACT_ID=P_tms_scd_update_tbl(LF).EPS_CONTRACT_ID
    AND VIEW_CONSIDERATION=P_tms_scd_update_tbl(LF).VIEW_CONSIDERATION;
   
  END LOOP;
  
 COMMIT; 
 O_ERROR_MESSAGE:='S';
  
EXCEPTION
WHEN OTHERS THEN  
  O_ERROR_MESSAGE:='F'||SQLERRM;
END UPDATE_IS_SELECTED_FLAG;

PROCEDURE GET_UPDATE_CTRL_DATA (P_PROJECT_ID VARCHAR2,
                                o_Get_Internal_List  OUT sys_refcursor,
                                o_Get_External_List  OUT sys_refcursor,
                                O_GET_TRAINNULL_LIST OUT sys_refcursor,
                                O_ERROR_MESSAGE OUT VARCHAR2)
AS

BEGIN

OPEN o_Get_Internal_List FOR
select * from (
SELECT API2.JOB_NUMBER,API2.BASELINE_ID BASELINE_ID
      ,'N' BL_FLAG
      ,(CASE WHEN (CTL.STATUS IS NULL 
              OR CON.FILTER_FLAG<>CTL.FILTER_FLAG
              OR CON.WEIGHT_FLAG<>CTL.WEIGHT_FLAG)
          THEN 'NA' ELSE CTL.STATUS END) STATUS
      ,API1.VIEW_CONSIDERATION
      ,DATADATE
      ,(CASE WHEN CON.FILTER_FLAG=CTL.FILTER_FLAG AND CON.WEIGHT_FLAG=CTL.WEIGHT_FLAG THEN CTL.REQUEST_DATE ELSE NULL END)  P_SIX_PULL_DATE      
      ,CON.FILTER_FLAG
      ,CON.WEIGHT_FLAG      
FROM SCD_TMS_CONFIG CON,
  SCD_TMS_API1 API1,
  SCD_TMS_API2 API2,
  (SELECT A.*
      ,ROW_NUMBER() OVER (PARTITION BY A.CONTRACT_ID
                                      ,A.EPS_CONTRACT_ID
                                      ,A.JOB_NUMBER
                            ORDER BY A.REQUEST_DATE DESC,A.LAST_UPDATED_DATE DESC) RN
      FROM SCD_TMS_UPDATE_CTRL A,
      SCD_TMS_CONFIG B
      WHERE A.BL_FLAG='N'
      AND A.INT_EXT_FLAG='I'
      AND A.CONTRACT_ID=B.CONTRACT_ID
      AND A.CONTRACT_ID=P_PROJECT_ID
      AND A.INT_EXT_FLAG=B.INT_EXT_FLAG
      AND A.FILTER_FLAG=B.FILTER_FLAG
      AND A.WEIGHT_FLAG=B.WEIGHT_FLAG) CTL
WHERE CON.CONTRACT_ID                           =API1.CONTRACT_ID
AND CON.CONTRACT_ID=P_PROJECT_ID
AND API1.VIEW_CONSIDERATION=CON.INT_EXT_FLAG
AND API1.VIEW_CONSIDERATION= API2.VIEW_CONSIDERATION
AND API1.EPS_CONTRACT_ID                      =API2.EPS_CONTRACT_ID
AND API1.IS_SELECTED                          ='Y'
AND API2.IS_SELECTED                          ='Y'
AND CON.INT_EXT_FLAG                          ='I'
AND API2.CURRENT_BASELINE_FLAG='Y'
AND API2.EPS_CONTRACT_ID=CTL.EPS_CONTRACT_ID(+)
AND API2.JOB_NUMBER=CTL.JOB_NUMBER(+)
AND CTL.RN(+)=1
UNION ALL
SELECT API2.JOB_NUMBER||'-Baseline',API2.BASELINE_ID
      ,'Y' BL_FLAG
      ,(CASE WHEN (CTL.STATUS IS NULL 
              OR CON.FILTER_FLAG<>CTL.FILTER_FLAG
              OR CON.WEIGHT_FLAG<>CTL.WEIGHT_FLAG)
          THEN 'NA' ELSE CTL.STATUS END) STATUS
      ,API1.VIEW_CONSIDERATION
      ,DATADATE
      ,(CASE WHEN CON.FILTER_FLAG=CTL.FILTER_FLAG AND CON.WEIGHT_FLAG=CTL.WEIGHT_FLAG THEN CTL.REQUEST_DATE ELSE NULL END)  P_SIX_PULL_DATE
      ,CON.FILTER_FLAG
      ,CON.WEIGHT_FLAG      
FROM SCD_TMS_CONFIG CON,
  SCD_TMS_API1 API1,
  SCD_TMS_API2 API2,
  (SELECT A.*
      ,ROW_NUMBER() OVER (PARTITION BY A.CONTRACT_ID
                                      ,A.EPS_CONTRACT_ID
                                      ,A.JOB_NUMBER
                            ORDER BY A.REQUEST_DATE DESC,A.LAST_UPDATED_DATE DESC) RN
      FROM SCD_TMS_UPDATE_CTRL A,
      SCD_TMS_CONFIG B
      WHERE A.BL_FLAG='Y'
      AND A.INT_EXT_FLAG='I'
      AND A.CONTRACT_ID=B.CONTRACT_ID
      AND A.CONTRACT_ID=P_PROJECT_ID
      AND A.INT_EXT_FLAG=B.INT_EXT_FLAG
      AND A.FILTER_FLAG=B.FILTER_FLAG
      AND A.WEIGHT_FLAG=B.WEIGHT_FLAG) CTL
WHERE CON.CONTRACT_ID                           =API1.CONTRACT_ID
AND CON.CONTRACT_ID=P_PROJECT_ID
AND API1.VIEW_CONSIDERATION=CON.INT_EXT_FLAG
AND API2.BASELINE_ID IS NOT NULL-- to handle the null baseline
AND API1.VIEW_CONSIDERATION= API2.VIEW_CONSIDERATION
AND API1.EPS_CONTRACT_ID                      =API2.EPS_CONTRACT_ID
AND API1.IS_SELECTED                          ='Y'
AND API2.IS_SELECTED                          ='Y'
AND CON.INT_EXT_FLAG                          ='I'
AND API2.CURRENT_BASELINE_FLAG='Y'
AND API2.EPS_CONTRACT_ID=CTL.EPS_CONTRACT_ID(+)
AND API2.BASELINE_ID=CTL.JOB_NUMBER(+)
AND CTL.RN(+)=1
) order by 1 ;

OPEN o_Get_External_List FOR
select * from (
SELECT API2.JOB_NUMBER,API2.BASELINE_ID BASELINE_ID
      ,'N' BL_FLAG
      ,(CASE WHEN (CTL.STATUS IS NULL 
              OR CON.FILTER_FLAG<>CTL.FILTER_FLAG
              OR CON.WEIGHT_FLAG<>CTL.WEIGHT_FLAG)
          THEN 'NA' ELSE CTL.STATUS END) STATUS
      ,API1.VIEW_CONSIDERATION
      ,DATADATE
      ,(CASE WHEN CON.FILTER_FLAG=CTL.FILTER_FLAG 
          AND CON.WEIGHT_FLAG=CTL.WEIGHT_FLAG 
        THEN CTL.REQUEST_DATE ELSE NULL END)  P_SIX_PULL_DATE      
      ,CON.FILTER_FLAG
      ,CON.WEIGHT_FLAG      
FROM SCD_TMS_CONFIG CON,
  SCD_TMS_API1 API1,
  SCD_TMS_API2 API2,
  (SELECT A.*
      ,ROW_NUMBER() OVER (PARTITION BY A.CONTRACT_ID
                                      ,A.EPS_CONTRACT_ID
                                      ,A.JOB_NUMBER
                            ORDER BY A.REQUEST_DATE DESC,A.LAST_UPDATED_DATE DESC) RN
      FROM SCD_TMS_UPDATE_CTRL A,
      SCD_TMS_CONFIG B
      WHERE A.BL_FLAG='N'
      AND A.INT_EXT_FLAG='E'
      AND A.CONTRACT_ID=B.CONTRACT_ID
      AND A.CONTRACT_ID=P_PROJECT_ID
      AND A.INT_EXT_FLAG=B.INT_EXT_FLAG
      AND A.FILTER_FLAG=B.FILTER_FLAG
      AND A.WEIGHT_FLAG=B.WEIGHT_FLAG) CTL
WHERE CON.CONTRACT_ID                           =API1.CONTRACT_ID
AND CON.CONTRACT_ID=P_PROJECT_ID
AND API1.VIEW_CONSIDERATION=CON.INT_EXT_FLAG
AND API1.VIEW_CONSIDERATION= API2.VIEW_CONSIDERATION
AND API1.EPS_CONTRACT_ID                      =API2.EPS_CONTRACT_ID
AND API1.IS_SELECTED                          ='Y'
AND API2.IS_SELECTED                          ='Y'
AND CON.INT_EXT_FLAG                          ='E'
AND API2.CURRENT_BASELINE_FLAG='Y'
AND API2.EPS_CONTRACT_ID=CTL.EPS_CONTRACT_ID(+)
AND API2.JOB_NUMBER=CTL.JOB_NUMBER(+)
AND CTL.RN(+)=1
UNION ALL
SELECT API2.JOB_NUMBER||'-Baseline',API2.BASELINE_ID
      ,'Y' BL_FLAG
      ,(CASE WHEN (CTL.STATUS IS NULL 
              OR CON.FILTER_FLAG<>CTL.FILTER_FLAG
              OR CON.WEIGHT_FLAG<>CTL.WEIGHT_FLAG)
          THEN 'NA' ELSE CTL.STATUS END) STATUS
      ,API1.VIEW_CONSIDERATION
      ,DATADATE
      ,(CASE WHEN CON.FILTER_FLAG=CTL.FILTER_FLAG 
          AND CON.WEIGHT_FLAG=CTL.WEIGHT_FLAG 
        THEN CTL.REQUEST_DATE ELSE NULL END)  P_SIX_PULL_DATE 
      ,CON.FILTER_FLAG
      ,CON.WEIGHT_FLAG      
FROM SCD_TMS_CONFIG CON,
  SCD_TMS_API1 API1,
  SCD_TMS_API2 API2,
  (SELECT A.*
      ,ROW_NUMBER() OVER (PARTITION BY A.CONTRACT_ID
                                      ,A.EPS_CONTRACT_ID
                                      ,A.JOB_NUMBER
                            ORDER BY A.REQUEST_DATE DESC,A.LAST_UPDATED_DATE DESC) RN
      FROM SCD_TMS_UPDATE_CTRL A,
      SCD_TMS_CONFIG B
      WHERE A.BL_FLAG='Y'
      AND A.INT_EXT_FLAG='E'
      AND A.CONTRACT_ID=B.CONTRACT_ID
      AND A.CONTRACT_ID=P_PROJECT_ID
      AND A.INT_EXT_FLAG=B.INT_EXT_FLAG
      AND A.FILTER_FLAG=B.FILTER_FLAG
      AND A.WEIGHT_FLAG=B.WEIGHT_FLAG) CTL
WHERE CON.CONTRACT_ID                           =API1.CONTRACT_ID
AND CON.CONTRACT_ID=P_PROJECT_ID
AND API2.BASELINE_ID IS NOT NULL-- to handle the null baseline
AND API1.VIEW_CONSIDERATION=CON.INT_EXT_FLAG
AND API1.VIEW_CONSIDERATION= API2.VIEW_CONSIDERATION
AND API1.EPS_CONTRACT_ID                      =API2.EPS_CONTRACT_ID
AND API1.IS_SELECTED                          ='Y'
AND API2.IS_SELECTED                          ='Y'
AND CON.INT_EXT_FLAG                          ='E'
AND API2.CURRENT_BASELINE_FLAG='Y'
AND API2.EPS_CONTRACT_ID=CTL.EPS_CONTRACT_ID(+)
AND API2.BASELINE_ID=CTL.JOB_NUMBER(+)
AND CTL.RN(+)=1
)order by 1 ;


OPEN O_GET_TRAINNULL_LIST FOR

select distinct API3.JOB_NUMBER as JOB_NUMBER from TG_SCD_TMS_API3 API3, SCD_TMS_API2 API2
where API3.TRAIN is null  
AND API2.IS_SELECTED = 'Y' and API2.JOB_NUMBER = API3.JOB_NUMBER   and API3.CONTRACT_ID = P_PROJECT_ID
AND (SELECT COUNT(1) FROM SCD_TMS_UPDATE_CTRL WHERE CONTRACT_ID = P_PROJECT_ID AND STATUS = 'INPROGRESS') < 1;

 O_ERROR_MESSAGE:='S';
  
EXCEPTION
WHEN OTHERS THEN  
  O_ERROR_MESSAGE:='F'||SQLERRM;
END GET_UPDATE_CTRL_DATA;


PROCEDURE UPDATE_JOB_CONTROL_TBL(P_CONTRACT_ID  VARCHAR2,
                                 P_INT_EXT_FLAG VARCHAR2,
                                 P_TMS_UPD_CTRL_TBL T_TMS_UPD_CTRL_TBL,
								                 P_DONE_BY  VARCHAR2,
                                 O_STATUS 	OUT  SYS_REFCURSOR,
								                 O_ERROR_MESSAGE OUT VARCHAR2)
AS

V_DATA_DATEFLAG VARCHAR2(1000);
V_REQUEST_LOG_ID NUMBER(10);

BEGIN

V_DATA_DATEFLAG:=GET_REFRESH_FLAG(P_CONTRACT_ID,P_INT_EXT_FLAG);

IF SUBSTR(V_DATA_DATEFLAG,1,1)='S' THEN

SELECT NVL(MAX(REQUEST_LOG_ID),0)+1 INTO 
    V_REQUEST_LOG_ID
  FROM SCD_TMS_UPDATE_CTRL;

	FOR LF IN P_TMS_UPD_CTRL_TBL.FIRST .. P_TMS_UPD_CTRL_TBL.LAST
	LOOP
  
		INSERT INTO SCD_TMS_UPDATE_CTRL VALUES (
			V_REQUEST_LOG_ID ,
			P_CONTRACT_ID ,
			P_TMS_UPD_CTRL_TBL(LF).EPS_CONTRACT_ID ,
			P_TMS_UPD_CTRL_TBL(LF).JOB_NUMBER ,
			(SELECT MIN(CASE WHEN JOB_NUMBER=P_TMS_UPD_CTRL_TBL(LF).JOB_NUMBER THEN 'N'
                    ELSE CASE WHEN BASELINE_ID=P_TMS_UPD_CTRL_TBL(LF).JOB_NUMBER THEN 'Y'
                  END END )
            FROM SCD_TMS_API2 
        WHERE EPS_CONTRACT_ID=P_TMS_UPD_CTRL_TBL(LF).EPS_CONTRACT_ID
          AND (JOB_NUMBER=P_TMS_UPD_CTRL_TBL(LF).JOB_NUMBER
                OR BASELINE_ID=P_TMS_UPD_CTRL_TBL(LF).JOB_NUMBER)) ,
			'INPROGRESS' ,
			P_TMS_UPD_CTRL_TBL(LF).DATA_DATE ,
			P_TMS_UPD_CTRL_TBL(LF).INT_EXT_FLAG ,
			P_TMS_UPD_CTRL_TBL(LF).WEIGHT_FLAG ,
			P_TMS_UPD_CTRL_TBL(LF).FILTER_FLAG ,
			P_DONE_BY ,
			SYSDATE ,
			P_DONE_BY ,
			SYSDATE,
      NULL);
      
  END LOOP;
  
	COMMIT;	
  
  OPEN O_STATUS FOR 
	SELECT SUBSTR(V_DATA_DATEFLAG,1,1) STATUS,
          SUBSTR(V_DATA_DATEFLAG,3) STATUS_DESC,
		  V_REQUEST_LOG_ID REQUEST_LOG_ID
	FROM DUAL;
  
ELSE 

OPEN O_STATUS FOR 
	SELECT SUBSTR(V_DATA_DATEFLAG,1,1) STATUS,
          SUBSTR(V_DATA_DATEFLAG,3) STATUS_DESC,
		  V_REQUEST_LOG_ID REQUEST_LOG_ID
	FROM DUAL;

END IF;

	COMMIT;
	
	 O_ERROR_MESSAGE:='S';
  
EXCEPTION
WHEN OTHERS THEN  
  O_ERROR_MESSAGE:='F'||SQLERRM;
  
END UPDATE_JOB_CONTROL_TBL;

FUNCTION GET_REFRESH_FLAG(P_CONTRACT_ID VARCHAR2,
                          P_INT_EXT_FLAG VARCHAR2
                         )
RETURN VARCHAR2
AS
v_date_cnt number;
v_inprogress_cnt number;
v_message varchar2(4000);

BEGIN

SELECT COUNT(1) INTO V_INPROGRESS_CNT
		FROM SCD_TMS_UPDATE_CTRL
	WHERE CONTRACT_ID=P_CONTRACT_ID
	AND STATUS='INPROGRESS'
	AND REQUEST_DATE>(SYSDATE-INTERVAL '1' HOUR);

SELECT (CASE WHEN I_DATADATE<=1 and E_DATADATE<=1 THEN 1 ELSE 2 END ) INTO v_date_cnt
 FROM (
	SELECT COUNT(DISTINCT (CASE WHEN AP1.VIEW_CONSIDERATION='I' THEN DATADATE END)) I_DATADATE  ,
        COUNT(DISTINCT (CASE WHEN AP1.VIEW_CONSIDERATION='E' THEN DATADATE END)) E_DATADATE  
	FROM SCD_TMS_API1 AP1,
		SCD_TMS_API2 AP2
	WHERE AP1.EPS_CONTRACT_ID  = AP2.EPS_CONTRACT_ID
  AND AP1.VIEW_CONSIDERATION = AP2.VIEW_CONSIDERATION
	AND  AP1.CONTRACT_ID            = P_CONTRACT_ID
	AND AP1.VIEW_CONSIDERATION= (CASE WHEN P_INT_EXT_FLAG IS NULL THEN AP1.VIEW_CONSIDERATION ELSE P_INT_EXT_FLAG END )
  AND AP2.CURRENT_BASELINE_FLAG='Y'
  AND AP1.IS_SELECTED='Y'
  AND AP2.IS_SELECTED='Y');
 
	
	IF v_inprogress_cnt=0 and v_date_cnt<=1 THEN	
		v_message:='S_No job is in progress for this project';
	ELSIF v_date_cnt>1 THEN
		v_message:='E_We cannot update S-curve data because the Data Date in P6 is not equal for all selected Projects. Please correct it in P6 and then run again Update S-Curve Data';
	ELSIF v_inprogress_cnt<>0 THEN
		v_message:='P_This project has at least one schedule pending refresh. Please try again in few minutes.';
	END IF;
/*
	IF v_inprogress_cnt=0  THEN	
		v_message:='S_No job is in progress for this project';
	ELSIF v_inprogress_cnt<>0 THEN
		v_message:='P_This project has at least one schedule pending refresh. Please try again in few minutes.';
	END IF;
  */
  
	RETURN v_message;

EXCEPTION
WHEN OTHERS THEN
	v_message:='F';
	RETURN v_message;
	
END GET_REFRESH_FLAG;

/*PROCEDURE UPDATE_JOBNUM_STATUS(P_REQUEST_LOG_ID NUMBER,
                               P_JOB_NUMBER   VARCHAR2,
                               P_STATUS       VARCHAR2,
                               P_DONE_BY VARCHAR2,
                               P_REMARK VARCHAR2,
                               O_ERROR_MESSAGE OUT VARCHAR2)
AS
  V_CNT NUMBER(5);
  
BEGIN

	UPDATE SCD_TMS_UPDATE_CTRL 
		SET STATUS=P_STATUS,
		LAST_UPDATED_BY=P_DONE_BY,
		LAST_UPDATED_DATE=SYSDATE,
    REMARKS=P_REMARK
	WHERE REQUEST_LOG_ID=P_REQUEST_LOG_ID
	AND JOB_NUMBER=P_JOB_NUMBER;

  COMMIT;
  O_ERROR_MESSAGE:='S';
  
EXCEPTION
WHEN OTHERS THEN
  O_ERROR_MESSAGE:='F';
END UPDATE_JOBNUM_STATUS;*/

PROCEDURE GET_SCURVE_LST_UPDATED (P_PROJECT_ID 		VARCHAR2,
                                  P_FILTER VARCHAR2,
                                  P_DEPT_NM VARCHAR2,
                                  P_TRAIN VARCHAR2,
                                  P_JOB_NUMBER VARCHAR2,
                                  P_INT_EXT_FLAG VARCHAR2,
                                  O_DATA_DATE  OUT VARCHAR2,
                                  O_LAST_REFRESH  OUT VARCHAR2,
                                  --O_SCURVE_LST_UPDATED OUT SYS_REFCURSOR,
                                  O_SCURVE_LST_UPDATED_PCT OUT SYS_REFCURSOR,
                                  O_PRJ_DISPLAY_INFO	OUT SYS_REFCURSOR,
                                  O_SCURVE_LST_UPDATED_MON_PCT OUT SYS_REFCURSOR,
                                  --O_SCURVE_LST_BASELINE OUT SYS_REFCURSOR,
                                  O_ERROR_MESSAGE OUT VARCHAR2)
AS

V_DATA_DATEFLAG VARCHAR2(1000);

BEGIN

V_DATA_DATEFLAG:=GET_REFRESH_FLAG_API3(P_PROJECT_ID,P_INT_EXT_FLAG,P_FILTER);

IF SUBSTR(V_DATA_DATEFLAG,1,1)='S' THEN

DELETE FROM SCD_TMS_LST_UPDATE_GTT;

COMMIT;

INSERT INTO SCD_TMS_LST_UPDATE_GTT
WITH ACTUAL AS (SELECT DISTINCT LV3.PROJECT_DT
					,LV3.DATADATE
					,SUM((CASE WHEN LV3.PROJECT_DT<=LV3.DATADATE THEN LV3.CUM_ACTUAL ELSE  NULL END)) OVER (PARTITION BY LV3.PROJECT_DT) ACTUAL
					,SUM((CASE WHEN LV3.PROJECT_DT>=LV3.DATADATE THEN LV3.CUM_ACTUAL  ELSE  NULL END)) OVER (PARTITION BY LV3.PROJECT_DT) FORECAST
					,SUM(LV3.CUM_FORECAST) OVER (PARTITION BY LV3.PROJECT_DT) LATE_FORECAST
					,SUM((CASE WHEN LV3.PROJECT_DT=LV3.DATADATE THEN LV3.CUM_ACTUAL ELSE  NULL END)) OVER (PARTITION BY LV3.CONTRACT_ID) ACT_DA_DT
				FROM TG_SCD_TMS_API3 LV3,
            SCD_TMS_CONFIG CON,
						SCD_TMS_API2 AP2
				WHERE AP2.IS_SELECTED='Y'
          AND LV3.EPS_CONTRACT_ID=AP2.EPS_CONTRACT_ID
          AND LV3.JOB_NUMBER=AP2.JOB_NUMBER
          AND AP2.CURRENT_BASELINE_FLAG='Y'
          AND LV3.CONTRACT_ID =P_PROJECT_ID        
          AND LV3.CONTRACT_ID =CON.CONTRACT_ID        
          AND LV3.WEIGHT=CON.WEIGHT_FLAG
          AND LV3.VIEW_CONSIDERATION =CON.INT_EXT_FLAG
          AND LV3.VIEW_CONSIDERATION=AP2.VIEW_CONSIDERATION
					AND LV3.VIEW_CONSIDERATION =P_INT_EXT_FLAG
					AND LV3.JOB_NUMBER=(CASE WHEN P_JOB_NUMBER ='OVERALL' THEN LV3.JOB_NUMBER ELSE P_JOB_NUMBER END)
					AND LV3.DEPARTMENT_NAME=(CASE WHEN P_DEPT_NM ='OVERALL' THEN LV3.DEPARTMENT_NAME ELSE P_DEPT_NM END) 
					AND LV3.FILTER=P_FILTER
					AND NVL(LV3.TRAIN,'X')=(CASE WHEN P_TRAIN ='OVERALL' THEN NVL(LV3.TRAIN,'X') ELSE P_TRAIN END)),
	BASELINE AS (SELECT  DISTINCT BL3.PROJECT_DT
					,SUM(BL3.CUM_ACTUAL ) BASELINE
					,SUM(BL3.CUM_FORECAST) BL_LATE
				FROM TG_SCD_TMS_API3 BL3,
        SCD_TMS_CONFIG CON1,
				(SELECT BASELINE_ID
					FROM SCD_TMS_API1 AP1,
						SCD_TMS_API2 AP2
					WHERE AP1.CONTRACT_ID        =P_PROJECT_ID
					AND AP1.EPS_CONTRACT_ID      =AP2.EPS_CONTRACT_ID
					AND AP1.VIEW_CONSIDERATION   =P_INT_EXT_FLAG
          AND AP1.VIEW_CONSIDERATION   =AP2.VIEW_CONSIDERATION --Added on 22 Dec 2016
					AND AP2.CURRENT_BASELINE_FLAG='Y'
          AND AP1.IS_SELECTED='Y'
          AND AP2.IS_SELECTED='Y'
					AND AP2.JOB_NUMBER           =(CASE WHEN P_JOB_NUMBER ='OVERALL' THEN AP2.JOB_NUMBER ELSE P_JOB_NUMBER END)) CON
				WHERE BL3.JOB_NUMBER=CON.BASELINE_ID 
				AND BL3.CONTRACT_ID =P_PROJECT_ID
        AND BL3.CONTRACT_ID =CON1.CONTRACT_ID        
        AND BL3.WEIGHT=CON1.WEIGHT_FLAG
        AND BL3.VIEW_CONSIDERATION =CON1.INT_EXT_FLAG
				AND BL3.VIEW_CONSIDERATION =P_INT_EXT_FLAG
				AND BL3.DEPARTMENT_NAME=(CASE WHEN P_DEPT_NM ='OVERALL' THEN BL3.DEPARTMENT_NAME ELSE P_DEPT_NM END)
				AND BL3.FILTER=P_FILTER
				AND NVL(BL3.TRAIN,'X')=(CASE WHEN P_TRAIN ='OVERALL' THEN NVL(BL3.TRAIN,'X') ELSE P_TRAIN END)
				GROUP BY BL3.PROJECT_DT)
SELECT ACTUAL.PROJECT_DT ,
	   ACTUAL.ACTUAL,
	   ACTUAL.FORECAST,
	   (CASE WHEN ACTUAL.PROJECT_DT>=ACTUAL.DATADATE THEN NVL(ACTUAL.ACT_DA_DT,0)+NVL(ACTUAL.LATE_FORECAST,0) ELSE NULL END ) LATE_FORECAST,
	   BASELINE.BASELINE,
	   BASELINE.BL_LATE
   FROM BASELINE
FULL OUTER JOIN ACTUAL ON BASELINE.PROJECT_DT=ACTUAL.PROJECT_DT
ORDER BY ACTUAL.PROJECT_DT;

OPEN O_SCURVE_LST_UPDATED_PCT FOR
select * from (
SELECT TO_CHAR(GT1.PROJECT_DT,'YYYY-MM-DD') as PROJECT_DT,
  ROUND(GT1.ACTUAL /GT2.FORECAST*100,2) ACTUAL ,
  ROUND(GT1.FORECAST/GT2.FORECAST*100,2) FORECAST ,
  ROUND(GT1.LATE_FORECAST/GT2.LATE_FORECAST*100,2) LATE_FORECAST ,
  ROUND(GT1.BASELINE/GT2.BASELINE*100,2) BASELINE ,
  --ROUND(GT1.BL_LATE/GT2.BL_LATE*100,2) BL_LATE
  CASE WHEN GT2.BL_LATE = 0 THEN 0 ELSE ROUND(GT1.BL_LATE/GT2.BL_LATE*100,2) END BL_LATE
FROM SCD_TMS_LST_UPDATE_GTT GT1,
  (SELECT (CASE WHEN MAX(NVL(FORECAST,0)) IN (0,NULL) THEN MAX(NVL(ACTUAL,0)) ELSE MAX(NVL(FORECAST,0)) END )FORECAST,
    (CASE WHEN MAX(NVL(LATE_FORECAST,0)) IN (0,NULL) THEN MAX(NVL(ACTUAL,0)) ELSE MAX(NVL(LATE_FORECAST,0)) END ) LATE_FORECAST,
    MAX(NVL(BASELINE,0))  BASELINE,
    MAX(NVL(BL_LATE,0))   BL_LATE  
  FROM SCD_TMS_LST_UPDATE_GTT
  ) GT2
)WHERE (NVL(ACTUAL,0)>0
or NVL(FORECAST,0)>0
or NVL(LATE_FORECAST,0)>0
or NVL(BASELINE,0)>0
or NVL(BL_LATE,0)>0)
ORDER BY PROJECT_DT;

OPEN O_PRJ_DISPLAY_INFO FOR
SELECT ACTUAL,
  AT_COMPLETE,
  AT_COMPLETE_LATE,
  BL_EARLY,
  BL_LATE
FROM SCD_TMS_CONFIG
WHERE CONTRACT_ID =P_PROJECT_ID
AND INT_EXT_FLAG  =P_INT_EXT_FLAG
--AND FILTER_FLAG   =P_FILTER
;

SELECT DISTINCT TO_CHAR(LV3.DATADATE,'DD-MON-YYYY') INTO O_DATA_DATE
				FROM TG_SCD_TMS_API3 LV3,
            SCD_TMS_CONFIG CON,
						SCD_TMS_API2 AP2
				WHERE LV3.EPS_CONTRACT_ID=AP2.EPS_CONTRACT_ID
          AND LV3.JOB_NUMBER=AP2.JOB_NUMBER          
          AND LV3.CONTRACT_ID =CON.CONTRACT_ID        
          AND LV3.WEIGHT=CON.WEIGHT_FLAG
          AND LV3.VIEW_CONSIDERATION =CON.INT_EXT_FLAG
          AND LV3.VIEW_CONSIDERATION=AP2.VIEW_CONSIDERATION
          AND AP2.IS_SELECTED='Y'
          AND AP2.CURRENT_BASELINE_FLAG='Y'
          AND LV3.CONTRACT_ID =P_PROJECT_ID
					AND LV3.VIEW_CONSIDERATION =P_INT_EXT_FLAG
					AND LV3.FILTER=P_FILTER
					AND NVL(LV3.TRAIN,'X')=(CASE WHEN P_TRAIN ='OVERALL' THEN NVL(LV3.TRAIN,'X') ELSE P_TRAIN END)
          AND LV3.JOB_NUMBER=(CASE WHEN P_JOB_NUMBER ='OVERALL' THEN LV3.JOB_NUMBER ELSE P_JOB_NUMBER END)
					AND LV3.DEPARTMENT_NAME=(CASE WHEN P_DEPT_NM ='OVERALL' THEN LV3.DEPARTMENT_NAME ELSE P_DEPT_NM END) ;

OPEN O_SCURVE_LST_UPDATED_MON_PCT FOR 
select * from (
SELECT GT1.PROJECT_DT ,
   ROUND(GT1.ACTUAL /GT2.FORECAST*100,2) ACTUAL ,
  ROUND(GT1.FORECAST/GT2.FORECAST*100,2) FORECAST ,
  ROUND(GT1.LATE_FORECAST/GT2.LATE_FORECAST*100,2) LATE_FORECAST ,
  ROUND(GT1.BASELINE/GT2.BASELINE*100,2) BASELINE ,
  --ROUND(GT1.BL_LATE/GT2.BL_LATE*100,2) BL_LATE
  CASE WHEN GT2.BL_LATE = 0 THEN 0 ELSE ROUND(GT1.BL_LATE/GT2.BL_LATE*100,2) END BL_LATE
FROM 
(SELECT * FROM SCD_TMS_LST_UPDATE_GTT 
WHERE PROJECT_DT IN (SELECT DISTINCT (CASE 
					WHEN PROJECT_DT=LST_DATE THEN PROJECT_DT
					WHEN PROJECT_DT=MIN_DATE THEN PROJECT_DT
					WHEN PROJECT_DT=MAX_DATE THEN PROJECT_DT
					WHEN PROJECT_DT=DATA_DATE THEN PROJECT_DT
				END) ED_DATE 
				FROM (SELECT PROJECT_DT
							,LAST_DAY(PROJECT_DT)LST_DATE
							,MIN(PROJECT_DT) OVER () MIN_DATE
							,MAX(PROJECT_DT) OVER () MAX_DATE
							,TO_DATE(O_DATA_DATE,'DD-MON-YYYY') DATA_DATE 
						FROM SCD_TMS_LST_UPDATE_GTT))) GT1,
  (SELECT (CASE WHEN MAX(NVL(FORECAST,0)) IN (0,NULL) THEN MAX(NVL(ACTUAL,0)) ELSE MAX(NVL(FORECAST,0)) END )FORECAST,
    (CASE WHEN MAX(NVL(LATE_FORECAST,0)) IN (0,NULL) THEN MAX(NVL(ACTUAL,0)) ELSE MAX(NVL(LATE_FORECAST,0)) END ) LATE_FORECAST,
    MAX(NVL(BASELINE,0))  BASELINE,
    MAX(NVL(BL_LATE,0))   BL_LATE  
  FROM SCD_TMS_LST_UPDATE_GTT
  ) GT2
)WHERE (NVL(ACTUAL,0)>0
or NVL(FORECAST,0)>0
or NVL(LATE_FORECAST,0)>0
or NVL(BASELINE,0)>0
or NVL(BL_LATE,0)>0)
ORDER BY PROJECT_DT;

/*SELECT DISTINCT TO_CHAR(AP2.DATADATE,'DD-MON-YYYY')
      INTO O_DATA_DATE
  FROM SCD_TMS_API1 AP1,
       SCD_TMS_API2 AP2
WHERE AP1.CONTRACT_ID        =P_PROJECT_ID
AND AP1.EPS_CONTRACT_ID      =AP2.EPS_CONTRACT_ID
AND AP1.VIEW_CONSIDERATION   =P_INT_EXT_FLAG
AND AP2.CURRENT_BASELINE_FLAG='Y'
AND AP1.IS_SELECTED='Y'
AND AP2.IS_SELECTED='Y'*/

SELECT TO_CHAR(NEW_TIME(MAX(REQUEST_DATE),'EDT','GMT'),'DD-MON-YYYY HH24:MI:SS') 
			INTO O_LAST_REFRESH
FROM SCD_TMS_UPDATE_CTRL
WHERE STATUS ='COMPLETE'
AND CONTRACT_ID=P_PROJECT_ID
AND INT_EXT_FLAG=P_INT_EXT_FLAG;
  
O_ERROR_MESSAGE:='S';

COMMIT;

ELSE 

O_ERROR_MESSAGE:=V_DATA_DATEFLAG;

OPEN O_SCURVE_LST_UPDATED_PCT for
SELECT * FROM SCD_TMS_LST_UPDATE_GTT WHERE ACTUAL = 10000;

OPEN O_SCURVE_LST_UPDATED_MON_PCT for
SELECT * FROM SCD_TMS_LST_UPDATE_GTT WHERE ACTUAL = 10000;

OPEN O_PRJ_DISPLAY_INFO FOR
SELECT ACTUAL,
  AT_COMPLETE,
  AT_COMPLETE_LATE,
  BL_EARLY,
  BL_LATE
FROM SCD_TMS_CONFIG
WHERE CONTRACT_ID =P_PROJECT_ID
AND INT_EXT_FLAG  =P_INT_EXT_FLAG
--AND FILTER_FLAG   =P_FILTER
;

O_DATA_DATE := '';
O_LAST_REFRESH := '';

END IF;

/*
OPEN O_SCURVE_LST_BASELINE FOR
SELECT
  JOB_DESC, 
  BASELINE_ID, 
  BASELINE_DESC 
FROM SCD_TMS_API2
WHERE contract_id = P_PROJECT_ID
AND current_baseline_flag = 'Y' 
AND is_selected = 'Y'
AND VIEW_CONSIDERATION = P_INT_EXT_FLAG
ORDER BY created_date DESC;*/
  
EXCEPTION
WHEN OTHERS THEN  
  O_ERROR_MESSAGE:='F'||SQLERRM;

END GET_SCURVE_LST_UPDATED;

PROCEDURE GET_FILTER_PARAM ( P_PROJECT_ID   VARCHAR2,
                              P_INT_EXT_FLAG VARCHAR2,
                              O_PRJ_JOB_NUMBER	OUT SYS_REFCURSOR,
                              O_FILTER	OUT SYS_REFCURSOR,
                              O_DEPT_NAME	OUT SYS_REFCURSOR,
                              O_TRAIN	OUT SYS_REFCURSOR,
                              O_TRAIN_JOB OUT SYS_REFCURSOR,
                              O_ERROR_MESSAGE OUT VARCHAR2)
AS

BEGIN

OPEN O_PRJ_JOB_NUMBER FOR
SELECT 'OVERALL' JOB_NUMBER FROM DUAL
UNION ALL
SELECT DISTINCT AP2.JOB_NUMBER
  FROM SCD_TMS_API1 AP1,
       SCD_TMS_API2 AP2
WHERE AP1.CONTRACT_ID        =P_PROJECT_ID
AND AP1.EPS_CONTRACT_ID      =AP2.EPS_CONTRACT_ID
AND AP1.VIEW_CONSIDERATION   =P_INT_EXT_FLAG
AND AP2.CURRENT_BASELINE_FLAG='Y'
AND AP1.IS_SELECTED='Y'
AND AP2.IS_SELECTED='Y';


OPEN O_FILTER FOR
SELECT STG.FILTER_FLAG FILTER
	  ,RLV.DESCRIPTION 
FROM RT_LOOKUP_VALUES RLV,
	(SELECT *
     FROM SCD_TMS_CONFIG
    WHERE CONTRACT_ID =P_PROJECT_ID
AND INT_EXT_FLAG  =P_INT_EXT_FLAG
) STG
WHERE 
RLV.CODE=STG.FILTER_FLAG;

OPEN O_DEPT_NAME FOR
  SELECT 'OVERALL' DEPARTMENT_NAME FROM DUAL
  UNION ALL  
  SELECT DISTINCT  DEPARTMENT_NAME
    FROM TG_SCD_TMS_API3 TG,
    SCD_TMS_API2		AP2
  WHERE TG.CONTRACT_ID =P_PROJECT_ID
    AND TG.VIEW_CONSIDERATION  =P_INT_EXT_FLAG
    and tg.contract_id=ap2.contract_id
    and (tg.job_number=ap2.job_number or tg.job_number=ap2.baseline_id)
    and ap2.is_selected='Y'
    and ap2.current_baseline_flag='Y'
    and ap2.VIEW_CONSIDERATION=TG.VIEW_CONSIDERATION;
  
OPEN O_TRAIN FOR
  SELECT 'OVERALL' TRAIN FROM DUAL
  UNION ALL  
    SELECT DISTINCT TRAIN
    FROM TG_SCD_TMS_API3 TG,
    SCD_TMS_API2		AP2
  WHERE TG.CONTRACT_ID =P_PROJECT_ID
    AND TG.VIEW_CONSIDERATION  =P_INT_EXT_FLAG
    and tg.contract_id=ap2.contract_id
    and (tg.job_number=ap2.job_number or tg.job_number=ap2.baseline_id)
    and ap2.is_selected='Y'
    and ap2.current_baseline_flag='Y'
    and ap2.VIEW_CONSIDERATION=TG.VIEW_CONSIDERATION
    AND TG.TRAIN IS NOT NULL;

OPEN O_TRAIN_JOB FOR
  SELECT 'OVERALL' TRAIN, 'OVERALL' JOB_NUMBER FROM DUAL
  UNION ALL 
  SELECT * FROM
    (SELECT DISTINCT TRAIN, AP2.job_number JOB_NUMBER
    FROM TG_SCD_TMS_API3 TG,
    SCD_TMS_API2		AP2
  WHERE TG.CONTRACT_ID =  P_PROJECT_ID AND
     TG.VIEW_CONSIDERATION  = P_INT_EXT_FLAG
    and tg.contract_id=ap2.contract_id
    and (tg.job_number=ap2.job_number or tg.job_number=ap2.baseline_id)
    and ap2.is_selected='Y'
    and ap2.current_baseline_flag='Y'
    and ap2.VIEW_CONSIDERATION=TG.VIEW_CONSIDERATION
    AND TG.TRAIN IS NOT NULL
    ORDER BY TRAIN, JOB_NUMBER);

  O_ERROR_MESSAGE:='S';
  
EXCEPTION
WHEN OTHERS THEN
  O_ERROR_MESSAGE:='F';
END GET_FILTER_PARAM;


PROCEDURE UPDATE_PUBLISH_DETLS (P_PROJECT_ID 		VARCHAR2,
                                P_REQUESTED_BY		VARCHAR2, 
                                O_ERROR_MESSAGE OUT VARCHAR2)
AS
BEGIN

DELETE FROM TG_SCD_TMS_API3_PUBLISH 
WHERE CONTRACT_ID =P_PROJECT_ID;

DELETE FROM SCD_TMS_CONFIG_PUBLISH
WHERE CONTRACT_ID =P_PROJECT_ID;

INSERT INTO SCD_TMS_CONFIG_PUBLISH
SELECT CONTRACT_ID ,
  INT_EXT_FLAG ,
  WEIGHT_FLAG ,
  ACTUAL ,
  AT_COMPLETE_LATE ,
  AT_COMPLETE ,
  BL_EARLY ,
  BL_LATE ,
  FILTER_FLAG ,
  P_REQUESTED_BY ,
  SYSDATE ,
  P_REQUESTED_BY ,
  SYSDATE
FROM SCD_TMS_CONFIG
WHERE INT_EXT_FLAG='E'
AND CONTRACT_ID = P_PROJECT_ID;

INSERT INTO TG_SCD_TMS_API3_PUBLISH
SELECT DISTINCT API3.CONTRACT_ID       
			   ,API3.JOB_NUMBER
         ,(SELECT AP2.JOB_NUMBER
              FROM SCD_TMS_API2 AP2
            WHERE AP2.CURRENT_BASELINE_FLAG='Y'
            AND AP2.BASELINE_ID=API3.JOB_NUMBER
            AND AP2.VIEW_CONSIDERATION=API3.VIEW_CONSIDERATION) OTH_JOB_NUMBER
			   ,API3.EPS_CONTRACT_ID   
			   ,API3.VIEW_CONSIDERATION
			   ,API3.DATADATE          
			   ,API3.DEPARTMENT_NAME   
			   ,API3.TRAIN             
			   ,API3.WEIGHT            
			   ,API3.FILTER            
			   ,API3.PROJECT_DT        
			   ,API3.ACTUAL            
			   ,API3.FORECAST          
			   ,API3.CUM_ACTUAL        
			   ,API3.CUM_FORECAST      
			   ,SYSDATE
			   ,P_REQUESTED_BY
FROM TG_SCD_TMS_API3 API3,
     SCD_TMS_API2 API2,
     SCD_TMS_CONFIG CON
WHERE 1=1
AND API3.CONTRACT_ID          =API2.CONTRACT_ID
AND API3.CONTRACT_ID          =CON.CONTRACT_ID
AND API3.VIEW_CONSIDERATION   =API2.VIEW_CONSIDERATION
AND CON.INT_EXT_FLAG   		    =API2.VIEW_CONSIDERATION
AND API3.EPS_CONTRACT_ID      =API2.EPS_CONTRACT_ID
AND ((API3.JOB_NUMBER          =API2.JOB_NUMBER /*AND API3.DATADATE=API2.DATADATE*/) OR API3.JOB_NUMBER =API2.BASELINE_ID)
--AND API3.DATADATE=API2.DATADATE
AND API3.WEIGHT          	    =CON.WEIGHT_FLAG
AND API3.FILTER          	    =CON.FILTER_FLAG
AND API2.CURRENT_BASELINE_FLAG='Y'
AND API2.IS_SELECTED          ='Y'
AND CON.INT_EXT_FLAG       	  ='E'
AND API2.CONTRACT_ID          =P_PROJECT_ID;

COMMIT;

  O_ERROR_MESSAGE:='S';
  
EXCEPTION
WHEN OTHERS THEN
  O_ERROR_MESSAGE:='F'||SQLERRM;

END UPDATE_PUBLISH_DETLS;

PROCEDURE GET_SCURVE_LST_PUBLISH (P_PROJECT_ID VARCHAR2,
                                  P_FILTER VARCHAR2,
                                  P_DEPT_NM VARCHAR2,
                                  P_TRAIN VARCHAR2,
                                  P_JOB_NUMBER VARCHAR2,
                                  P_INT_EXT_FLAG VARCHAR2,
                                  O_DATA_DATE  OUT VARCHAR2,
                                  O_LAST_REFRESH  OUT VARCHAR2,
                                  O_SCURVE_LST_PUBLISH_PCT OUT SYS_REFCURSOR,
                                  O_PRJ_DISPLAY_INFO	OUT SYS_REFCURSOR,                                  
                                  O_SCURVE_LST_PUBLISH_MON_PCT OUT SYS_REFCURSOR,
                                  --O_SCURVE_LST_BASELINE OUT SYS_REFCURSOR,
                                  O_ERROR_MESSAGE OUT VARCHAR2)
AS

BEGIN

DELETE FROM SCD_TMS_LST_UPDATE_GTT;

COMMIT;

INSERT INTO SCD_TMS_LST_UPDATE_GTT
WITH ACTUAL AS (SELECT DISTINCT LV3.PROJECT_DT
					,LV3.DATADATE
					,SUM((CASE WHEN LV3.PROJECT_DT<=LV3.DATADATE THEN LV3.CUM_ACTUAL ELSE  NULL END)) OVER (PARTITION BY LV3.PROJECT_DT) ACTUAL
					,SUM((CASE WHEN LV3.PROJECT_DT>=LV3.DATADATE THEN LV3.CUM_ACTUAL  ELSE  NULL END)) OVER (PARTITION BY LV3.PROJECT_DT) FORECAST
					,SUM(LV3.CUM_FORECAST) OVER (PARTITION BY LV3.PROJECT_DT) LATE_FORECAST
					,SUM((CASE WHEN LV3.PROJECT_DT=LV3.DATADATE THEN LV3.CUM_ACTUAL ELSE  NULL END)) OVER (PARTITION BY LV3.CONTRACT_ID) ACT_DA_DT
				FROM TG_SCD_TMS_API3_PUBLISH LV3,
					 SCD_TMS_CONFIG_PUBLISH CON
				WHERE 1=1
					AND LV3.CONTRACT_ID =P_PROJECT_ID        
					AND LV3.CONTRACT_ID =CON.CONTRACT_ID        
					AND LV3.WEIGHT=CON.WEIGHT_FLAG
          AND LV3.OTH_JOB_NUMBER IS NULL
					AND LV3.VIEW_CONSIDERATION =CON.INT_EXT_FLAG
					AND LV3.VIEW_CONSIDERATION =P_INT_EXT_FLAG
					AND LV3.JOB_NUMBER=(CASE WHEN P_JOB_NUMBER ='OVERALL' THEN LV3.JOB_NUMBER ELSE P_JOB_NUMBER END)
					AND LV3.DEPARTMENT_NAME=(CASE WHEN P_DEPT_NM ='OVERALL' THEN LV3.DEPARTMENT_NAME ELSE P_DEPT_NM END) 
					AND LV3.FILTER=P_FILTER
					--AND LV3.TRAIN=(CASE WHEN P_TRAIN ='OVERALL' THEN LV3.TRAIN ELSE P_TRAIN END)),
          AND NVL(LV3.TRAIN,'X')=(CASE WHEN P_TRAIN ='OVERALL' THEN NVL(LV3.TRAIN,'X') ELSE P_TRAIN END)),
	BASELINE AS (SELECT  DISTINCT BL3.PROJECT_DT
                      ,SUM(BL3.CUM_ACTUAL ) BASELINE
                      ,SUM(BL3.CUM_FORECAST) BL_LATE
				FROM TG_SCD_TMS_API3_PUBLISH BL3,
             SCD_TMS_CONFIG_PUBLISH CON1
				WHERE 1=1
				AND BL3.OTH_JOB_NUMBER=(CASE WHEN P_JOB_NUMBER ='OVERALL' THEN BL3.OTH_JOB_NUMBER ELSE P_JOB_NUMBER END)
				AND BL3.CONTRACT_ID =P_PROJECT_ID
				AND BL3.CONTRACT_ID =CON1.CONTRACT_ID
				AND BL3.WEIGHT=CON1.WEIGHT_FLAG
        AND BL3.OTH_JOB_NUMBER IS NOT NULL
				AND BL3.VIEW_CONSIDERATION =CON1.INT_EXT_FLAG
				AND BL3.VIEW_CONSIDERATION =P_INT_EXT_FLAG
				AND BL3.DEPARTMENT_NAME=(CASE WHEN P_DEPT_NM ='OVERALL' THEN BL3.DEPARTMENT_NAME ELSE P_DEPT_NM END)
				AND BL3.FILTER=P_FILTER
				--AND BL3.TRAIN=(CASE WHEN P_TRAIN ='OVERALL' THEN BL3.TRAIN ELSE P_TRAIN END)
        AND NVL(BL3.TRAIN,'X')=(CASE WHEN P_TRAIN ='OVERALL' THEN NVL(BL3.TRAIN,'X') ELSE P_TRAIN END)
				GROUP BY BL3.PROJECT_DT)
SELECT ACTUAL.PROJECT_DT ,
	   ACTUAL.ACTUAL,
	   ACTUAL.FORECAST,
	   (CASE WHEN ACTUAL.PROJECT_DT>=ACTUAL.DATADATE THEN NVL(ACTUAL.ACT_DA_DT,0)+NVL(ACTUAL.LATE_FORECAST,0) ELSE NULL END ) LATE_FORECAST,
	   BASELINE.BASELINE,
	   BASELINE.BL_LATE
   FROM BASELINE
FULL OUTER JOIN ACTUAL ON BASELINE.PROJECT_DT=ACTUAL.PROJECT_DT
ORDER BY ACTUAL.PROJECT_DT;

OPEN O_SCURVE_LST_PUBLISH_PCT FOR
select * from (
SELECT TO_CHAR(GT1.PROJECT_DT,'YYYY-MM-DD') as PROJECT_DT,
  ROUND(GT1.ACTUAL /GT2.FORECAST*100,2) ACTUAL ,
  ROUND(GT1.FORECAST/GT2.FORECAST*100,2) FORECAST ,
  ROUND(GT1.LATE_FORECAST/GT2.LATE_FORECAST *100,2) LATE_FORECAST ,
  ROUND(GT1.BASELINE/GT2.BASELINE*100,2) BASELINE ,
  ROUND(GT1.BL_LATE/GT2.BL_LATE*100,2) BL_LATE
FROM SCD_TMS_LST_UPDATE_GTT GT1,
  (SELECT (CASE WHEN MAX(NVL(FORECAST,0)) IN (0,NULL) THEN MAX(NVL(ACTUAL,0)) ELSE MAX(NVL(FORECAST,0)) END )FORECAST,
    (CASE WHEN MAX(NVL(LATE_FORECAST,0)) IN (0,NULL) THEN MAX(NVL(ACTUAL,0)) ELSE MAX(NVL(LATE_FORECAST,0)) END ) LATE_FORECAST,    
    MAX(NVL(BASELINE,0))  BASELINE,
    MAX(NVL(BL_LATE,0))   BL_LATE  
  FROM SCD_TMS_LST_UPDATE_GTT
  ) GT2
)WHERE (NVL(ACTUAL,0)>0
or NVL(FORECAST,0)>0
or NVL(LATE_FORECAST,0)>0
or NVL(BASELINE,0)>0
or NVL(BL_LATE,0)>0)
ORDER BY PROJECT_DT;


OPEN O_PRJ_DISPLAY_INFO FOR
SELECT ACTUAL,
  AT_COMPLETE,
  AT_COMPLETE_LATE,
  BL_EARLY,
  BL_LATE
FROM SCD_TMS_CONFIG_PUBLISH
WHERE CONTRACT_ID =P_PROJECT_ID
AND INT_EXT_FLAG  =P_INT_EXT_FLAG
;

SELECT DISTINCT TO_CHAR(MAX(DATADATE),'DD-MON-YYYY')
      INTO O_DATA_DATE
FROM TG_SCD_TMS_API3_PUBLISH
WHERE CONTRACT_ID=P_PROJECT_ID;

OPEN O_SCURVE_LST_PUBLISH_MON_PCT FOR
select * from (
SELECT GT1.PROJECT_DT ,
  ROUND(GT1.ACTUAL /GT2.FORECAST*100,2) ACTUAL ,
  ROUND(GT1.FORECAST/GT2.FORECAST*100,2) FORECAST ,
  ROUND(GT1.LATE_FORECAST/GT2.LATE_FORECAST *100,2) LATE_FORECAST ,
  ROUND(GT1.BASELINE/GT2.BASELINE*100,2) BASELINE ,
  ROUND(GT1.BL_LATE/GT2.BL_LATE*100,2) BL_LATE
FROM (SELECT * FROM SCD_TMS_LST_UPDATE_GTT 
WHERE PROJECT_DT IN (SELECT DISTINCT (CASE 
					WHEN PROJECT_DT=LST_DATE THEN PROJECT_DT
					WHEN PROJECT_DT=MIN_DATE THEN PROJECT_DT
					WHEN PROJECT_DT=MAX_DATE THEN PROJECT_DT
					WHEN PROJECT_DT=DATA_DATE THEN PROJECT_DT
				END) ED_DATE 
				FROM (SELECT PROJECT_DT
							,LAST_DAY(PROJECT_DT)LST_DATE
							,MIN(PROJECT_DT) OVER () MIN_DATE
							,MAX(PROJECT_DT) OVER () MAX_DATE
							,TO_DATE(O_DATA_DATE,'DD-MON-YYYY') DATA_DATE 
						FROM SCD_TMS_LST_UPDATE_GTT))) GT1,
  (SELECT (CASE WHEN MAX(NVL(FORECAST,0)) IN (0,NULL) THEN MAX(NVL(ACTUAL,0)) ELSE MAX(NVL(FORECAST,0)) END )FORECAST,
    (CASE WHEN MAX(NVL(LATE_FORECAST,0)) IN (0,NULL) THEN MAX(NVL(ACTUAL,0)) ELSE MAX(NVL(LATE_FORECAST,0)) END ) LATE_FORECAST,    
    MAX(NVL(BASELINE,0))  BASELINE,
    MAX(NVL(BL_LATE,0))   BL_LATE  
  FROM SCD_TMS_LST_UPDATE_GTT
  ) GT2
)WHERE (NVL(ACTUAL,0)>0
or NVL(FORECAST,0)>0
or NVL(LATE_FORECAST,0)>0
or NVL(BASELINE,0)>0
or NVL(BL_LATE,0)>0)
ORDER BY PROJECT_DT;
  
  
--OPEN O_SCURVE_LST_BASELINE FOR
--SELECT
--  JOB_DESC, 
--  BASELINE_ID, 
--  BASELINE_DESC 
--FROM SCD_TMS_API2
--WHERE contract_id = P_PROJECT_ID
--AND current_baseline_flag = 'Y' 
--AND is_selected = 'Y'
--AND VIEW_CONSIDERATION = P_INT_EXT_FLAG
--ORDER BY created_date DESC;

SELECT TO_CHAR(NEW_TIME(MAX(CREATED_DATE),'EDT','GMT'),'DD-MON-YYYY HH24:MI:SS')  
			INTO O_LAST_REFRESH
FROM TG_SCD_TMS_API3_PUBLISH
WHERE CONTRACT_ID=P_PROJECT_ID;
  
O_ERROR_MESSAGE:='S';

COMMIT;
  
EXCEPTION
WHEN OTHERS THEN  
  O_ERROR_MESSAGE:='F'||SQLERRM;
  
END GET_SCURVE_LST_PUBLISH;

PROCEDURE GET_PUBLISH_FILTER_PARAM (P_PROJECT_ID   VARCHAR2,
                                    P_INT_EXT_FLAG VARCHAR2,
                                    O_PRJ_JOB_NUMBER	OUT SYS_REFCURSOR,
                                    O_FILTER	OUT SYS_REFCURSOR,
                                    O_DEPT_NAME	OUT SYS_REFCURSOR,
                                    O_TRAIN	OUT SYS_REFCURSOR,
                                    O_TRAIN_JOB OUT SYS_REFCURSOR,
                                    O_ERROR_MESSAGE OUT VARCHAR2)
AS

BEGIN

OPEN O_PRJ_JOB_NUMBER FOR
SELECT 'OVERALL' JOB_NUMBER FROM DUAL
UNION ALL
SELECT DISTINCT JOB_NUMBER FROM
	TG_SCD_TMS_API3_PUBLISH
WHERE CONTRACT_ID =P_PROJECT_ID
AND OTH_JOB_NUMBER IS NULL;

OPEN O_FILTER FOR
SELECT distinct STG.FILTER FILTER
	  ,RLV.DESCRIPTION
FROM RT_LOOKUP_VALUES RLV,
	(SELECT *
		FROM TG_SCD_TMS_API3_PUBLISH
	 WHERE CONTRACT_ID =P_PROJECT_ID
	 AND VIEW_CONSIDERATION =P_INT_EXT_FLAG
) STG
WHERE 
RLV.CODE=STG.FILTER;

OPEN O_DEPT_NAME FOR
  SELECT 'OVERALL' DEPARTMENT_NAME FROM DUAL
  UNION ALL  
  SELECT DISTINCT  DEPARTMENT_NAME
    FROM TG_SCD_TMS_API3_PUBLISH
  WHERE CONTRACT_ID =P_PROJECT_ID
    AND VIEW_CONSIDERATION  =P_INT_EXT_FLAG;

OPEN O_TRAIN FOR
  SELECT 'OVERALL' TRAIN FROM DUAL
  UNION ALL  
  SELECT DISTINCT TRAIN
    FROM TG_SCD_TMS_API3_PUBLISH
  WHERE CONTRACT_ID =P_PROJECT_ID
    AND VIEW_CONSIDERATION  =P_INT_EXT_FLAG
    AND TRAIN IS NOT NULL;
    
OPEN O_TRAIN_JOB FOR
  SELECT 'OVERALL' TRAIN, 'OVERALL' JOB_NUMBER FROM DUAL
  UNION ALL  
  SELECT DISTINCT TRAIN , JOB_NUMBER
   FROM TG_SCD_TMS_API3_PUBLISH
  WHERE CONTRACT_ID =P_PROJECT_ID
    AND VIEW_CONSIDERATION  =P_INT_EXT_FLAG
    AND TRAIN IS NOT NULL
    AND OTH_JOB_NUMBER IS NULL; 

  O_ERROR_MESSAGE:='S';  
EXCEPTION
WHEN OTHERS THEN
  O_ERROR_MESSAGE:='F';  
END GET_PUBLISH_FILTER_PARAM;

PROCEDURE UPDATE_JOBNUM_STATUS(P_REQUEST_LOG_ID NUMBER,
                               P_JOB_NUMBER   VARCHAR2,
                               P_BASELINE_ID    VARCHAR2,
                               P_STATUS       VARCHAR2,
                               P_DONE_BY VARCHAR2,
                               P_REMARK VARCHAR2,
                               O_ERROR_MESSAGE OUT VARCHAR2)
AS
  V_CNT NUMBER(5);
  
BEGIN

	UPDATE SCD_TMS_UPDATE_CTRL 
		SET STATUS=P_STATUS,
		LAST_UPDATED_BY=P_DONE_BY,
		LAST_UPDATED_DATE=SYSDATE,
    REMARKS=P_REMARK
	WHERE REQUEST_LOG_ID=P_REQUEST_LOG_ID
	AND JOB_NUMBER in (P_JOB_NUMBER,P_BASELINE_ID);

  COMMIT;
  O_ERROR_MESSAGE:='S';
  
EXCEPTION
WHEN OTHERS THEN
  O_ERROR_MESSAGE:='F';
END UPDATE_JOBNUM_STATUS;

PROCEDURE INSERT_JOB_NUMBER_REC (P_REQUEST_LOG_ID NUMBER,
                                 P_PROJECT_ID VARCHAR2,
                                 P_JOB_NUMBER VARCHAR2,
                                 P_BL_FLAG VARCHAR2,
                                 P_INT_EXT_FLAG VARCHAR2,
                                 O_ERROR_MESSAGE OUT VARCHAR2)
AS

CURSOR LC_WRK_PRJ (P_REQ_LOG_ID  NUMBER,
                   P_JOB_NUM VARCHAR2,
                   P_INT_EXT_FLG VARCHAR2,
                   P_BL_FLG VARCHAR2)
IS
SELECT * FROM (
SELECT DISTINCT AP3.CONTRACT_ID ,
  AP3.JOB_NUMBER ,
  AP3.EPS_CONTRACT_ID ,
  AP3.VIEW_CONSIDERATION ,
  AP3.DATADATE ,
  AP3.DEPARTMENT_NAME ,
  AP3.TRAIN ,
  AP3.WEIGHT ,
  AP3.FILTER ,
  MAX(PROJECT_DT) OVER (PARTITION BY AP3.CONTRACT_ID,AP3.JOB_NUMBER,AP3.EPS_CONTRACT_ID,
                                    AP3.VIEW_CONSIDERATION,AP3.DATADATE,AP3.DEPARTMENT_NAME,
                                    AP3.TRAIN,AP3.WEIGHT,AP3.FILTER ) PRJ_MAX_DT,
  (SELECT MAX(PROJECT_DT)
		FROM STG_SCD_TMS_API3  API3,
         SCD_TMS_API2 AP2
	WHERE API3.CONTRACT_ID=CTL.CONTRACT_ID
  AND API3.CONTRACT_ID=AP2.CONTRACT_ID
  AND API3.EPS_CONTRACT_ID=AP2.EPS_CONTRACT_ID
  AND  AP2.IS_SELECTED='Y'
	AND API3.INT_EXT_FLAG =CTL.INT_EXT_FLAG) MAX_EXP_DT
FROM TG_SCD_TMS_API3 AP3,
  SCD_TMS_UPDATE_CTRL CTL
WHERE 1                   =1
AND AP3.CONTRACT_ID       =CTL.CONTRACT_ID
AND AP3.EPS_CONTRACT_ID   =CTL.EPS_CONTRACT_ID
AND AP3.VIEW_CONSIDERATION=CTL.INT_EXT_FLAG
AND AP3.WEIGHT            =CTL.WEIGHT_FLAG
AND SUBSTR(AP3.FILTER,1,3)=CTL.FILTER_FLAG
AND CTL.REQUEST_LOG_ID    =P_REQ_LOG_ID
AND CTL.JOB_NUMBER        =P_JOB_NUM
AND CTL.INT_EXT_FLAG      =P_INT_EXT_FLG)
WHERE PRJ_MAX_DT<>MAX_EXP_DT;

BEGIN

FOR lf IN LC_WRK_PRJ(P_REQUEST_LOG_ID,P_JOB_NUMBER,P_INT_EXT_FLAG,P_BL_FLAG)
LOOP

DBMS_OUTPUT.PUT_LINE(lf.JOB_NUMBER||lf.PRJ_MAX_DT||lf.MAX_EXP_DT);
INSERT INTO TG_SCD_TMS_API3
SELECT AP3.CONTRACT_ID ,
  AP3.JOB_NUMBER ,
  AP3.EPS_CONTRACT_ID ,
  AP3.VIEW_CONSIDERATION ,
  AP3.DATADATE ,
  AP3.DEPARTMENT_NAME ,
  AP3.TRAIN ,
  AP3.WEIGHT ,
  AP3.FILTER ,
  DT.PROJECT_DT ,
  AP3.ACTUAL ,
  AP3.FORECAST ,
  AP3.CUM_ACTUAL ,
  AP3.CUM_FORECAST ,
  AP3.CREATED_DATE
FROM TG_SCD_TMS_API3 AP3,
  (SELECT PROJECT_DT
  FROM SCD_TMS_DATES
  WHERE PROJECT_DT BETWEEN lf.PRJ_MAX_DT+1 AND lf.MAX_EXP_DT
  ) DT
WHERE 1                   =1
AND AP3.CONTRACT_ID       =lf.CONTRACT_ID
AND AP3.EPS_CONTRACT_ID   =lf.EPS_CONTRACT_ID
AND AP3.JOB_NUMBER        =lf.JOB_NUMBER
AND AP3.VIEW_CONSIDERATION=lf.VIEW_CONSIDERATION
AND AP3.datadate          =lf.DATADATE
AND AP3.department_name   =lf.DEPARTMENT_NAME
AND NVL(AP3.train,'X')    =NVL(lf.TRAIN,'X')
AND AP3.WEIGHT            =lf.WEIGHT
AND AP3.FILTER            =lf.FILTER
AND AP3.project_dt=lf.PRJ_MAX_DT;

DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT);
END LOOP;

COMMIT;

  O_ERROR_MESSAGE:='S';
  
EXCEPTION
WHEN OTHERS THEN
  O_ERROR_MESSAGE:='F'||SQLERRM;
END INSERT_JOB_NUMBER_REC;

FUNCTION GET_REFRESH_FLAG_API3(P_CONTRACT_ID VARCHAR2,
                               P_INT_EXT_FLAG VARCHAR2,
                               P_FILTER VARCHAR2
                         )
RETURN VARCHAR2
AS
v_date_cnt number;
v_inprogress_cnt number;
v_message varchar2(4000);

BEGIN

	SELECT COUNT(1) INTO V_INPROGRESS_CNT
		FROM SCD_TMS_UPDATE_CTRL
	WHERE CONTRACT_ID=P_CONTRACT_ID
	AND STATUS='INPROGRESS'
  AND INT_EXT_FLAG=P_INT_EXT_FLAG
	AND REQUEST_DATE>(SYSDATE-INTERVAL '1' HOUR);

SELECT (CASE WHEN I_DATADATE<=1 AND E_DATADATE<=1 THEN 1 ELSE 2 END ) INTO V_DATE_CNT
 FROM (
	SELECT COUNT(DISTINCT AP2.DATADATE ) I_DATADATE,  
  COUNT(DISTINCT TG.DATADATE ) E_DATADATE
	FROM SCD_TMS_API1 AP1,
		SCD_TMS_API2 AP2,
    TG_SCD_TMS_API3 TG,
    SCD_TMS_CONFIG CON
	WHERE AP1.EPS_CONTRACT_ID  = AP2.EPS_CONTRACT_ID
  AND AP1.VIEW_CONSIDERATION = AP2.VIEW_CONSIDERATION
	AND  AP1.CONTRACT_ID            = P_CONTRACT_ID
    and AP1.CONTRACT_ID            =CON.CONTRACT_ID
  and CON.INT_EXT_FLAG=AP1.VIEW_CONSIDERATION
  and CON.WEIGHT_FLAG=TG.WEIGHT
  AND TG.FILTER=P_FILTER
  AND AP1.CONTRACT_ID            = TG.CONTRACT_ID
  AND AP1.EPS_CONTRACT_ID  = TG.EPS_CONTRACT_ID
  AND TG.VIEW_CONSIDERATION=AP1.VIEW_CONSIDERATION
  AND AP2.JOB_NUMBER=TG.JOB_NUMBER
	AND AP1.VIEW_CONSIDERATION= P_INT_EXT_FLAG
  AND AP2.CURRENT_BASELINE_FLAG='Y'
  AND AP1.IS_SELECTED='Y'
  AND AP2.IS_SELECTED='Y');
  
	IF v_inprogress_cnt=0 and v_date_cnt<=1 THEN	
		v_message:='S_No job is in progress for this project';
	ELSIF v_date_cnt>1 THEN
		v_message:='E_Data Date in P6 is not equal for all selected Projects. Please correct it in P6';
	ELSIF v_inprogress_cnt<>0 THEN
		v_message:='P_This project has at least one schedule pending refresh. Please try again in few minutes.';
	END IF;
/*
	IF v_inprogress_cnt=0  THEN	
		v_message:='S_No job is in progress for this project';
	ELSIF v_inprogress_cnt<>0 THEN
		v_message:='P_This project has at least one schedule pending refresh. Please try again in few minutes.';
	END IF;
  */
  
	RETURN v_message;

EXCEPTION
WHEN OTHERS THEN
	v_message:='F';
	RETURN v_message;
	
END GET_REFRESH_FLAG_API3;

END SCURVE_DIG_TMS_API_PKG;